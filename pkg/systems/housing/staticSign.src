use uo;
use os;
use basic;
use cfgfile;

include "util/bank";
include "util/key";
include "include/objtype";
include ":attributes:attributes";
include ":gumps:gumpPrompt";
include ":housing:staticlayout";
include ":housing:coownerlayout";
include ":housing:friendlayout";
include ":housing:defaultlayout";
include "include/yesNo";
include ":housing:housing_settings";

const UOBJECT_DOORS_START := 0x0675;
const UOBJECT_DOORS_END   := 0x06f4;
const UOBJECT_BRASS_SIGN := 0x0bd2;
const UOBJECT_WOOD_SIGN := 0x0bd0;
const KEYSTART := 0x100e;
const KEYEND := 0x1013;
const KEYRING := 0x1011;

program use_static_sign( who, sign )


    // This is for a house that has never been purchased.    
    if(GetObjProperty(sign, "NewHouse"))
		var price		:= CInt(GetObjProperty(sign, "Price"));
		var bankbox		:= FindBankBox( who );
		var infoarr		:= GetObjProperty( sign, "newhomeinfo" );
		var nwx			:= infoarr[1];
		var nwy			:= infoarr[2];
		var sex			:= infoarr[3];
		var sey			:= infoarr[4];
		var signserial	:= infoarr[5];
		var nwz			:= infoarr[6];
		var sez			:= infoarr[7];
		nwz := nwz;
		sez := sez;
		
		if (!yesno_ex(who, "Do you want to buy this house?"))
			SendSysMessage (who, "Canceled.");
			return 0;
		endif
		
		set_critical( 1 );
		var created := CreateBuiltDeed(who, sign, bankbox);
		set_critical( 0 );
		
		if (!created)
			SendSysMessage( who, "ERROR: Unable to create built deed!", color := 33 );
			SendSysMessage(who, "Your bankbox might be too full. Try removing some items from it.", color := 33);
			SendSysMessage(who, "Then come back and try buying this house again.", color := 33);
		  return 0;
		endif 
		
		var packkey := CreateItemInBackpack( who, UOBJ_GOLD_KEY );
		
		if (!packkey)
			SendSysMessage( who, "Your backpack is too full! Cannot create the key.", color := 33);
			SendSysMessage(who, "Aborting. You must make room before buying this house.", color := 33);
			DestroyItem(created);
			return 0;
		endif
		
		var bankkey := CreateItemInContainer( bankbox, UOBJ_GOLD_KEY );
		
		if (!bankkey)
			SendSysMessage( who, "Your bankbox is too full! Cannot create the extra key!");
			SendSysMessage(who, "Aborting. You must make room before buying this house.", color := 33);
			DestroyItem(created);
			DestroyItem( packkey );
			return 0;
		endif
	
		if (!who.spendgold (price))
			SendSysMessage (who, "You don't have enough money in your backpack to buy it.", color := 33);
			SendSysMessage (who, "Checking your bank box...", color := 56);
			Sleep(2);
			if(!SpendCoin(who, price, bankbox, UOBJ_GOLD_COIN))
				SendSysMessage(who, "You don't have enough in the bank to buy it either. Sorry.", color := 33);
				DestroyItem(created);
				DestroyItem(packkey);
				DestroyItem(bankkey);
				return 0;
			endif
		endif
	
		var lockid := AllocLockId();
		SetObjProperty( packkey, "lockid", lockid );
		SetObjProperty( bankkey, "lockid", lockid );
		var box := ListObjectsInBox( nwx, nwy, -50, sex, sey, 50, sign.realm );
		var doorcfg := ReadConfigFile(":doors:itemdesc");
		if (!doorcfg)
			Print ("Doorcfg not found");
		endif
		foreach item in box
		  if((item.objtype == UOBJECT_BRASS_SIGN) || (item.objtype == UOBJECT_WOOD_SIGN))
			SetObjProperty(item, "lockid", lockid);
		  else
	//	    var arry := GetConfigStringKeys(doorcfg);
	//	    foreach entry in arry
	//	      if(CInt(entry) == item.objtype)
	//			SendSysMessage(who, "doorcfg entry = " + entry);
				if(item.IsA(POLCLASS_DOOR))
					item.locked := 1;
					var tile :=CreateItemAtLocation(item.x, item.y, item.z, 0x18889, 1, item.realm); // Create a bantile
					SetObjProperty(tile,"signserial", signserial);
					tile.invisible := 1;
					tile.movable := 0;
					SetObjProperty(item, "lockid", lockid);
				endif
	//	    endforeach
		  endif
		endforeach
		SendSysMessage(who, "Congratulations! You are the new owner of this house.", color := 66);
		Sleep(3);
		EraseObjProperty(sign, "NewHouse");
		SetObjProperty( created, "homeinfo", GetObjProperty(sign, "newhomeinfo"));
		EraseObjProperty(sign, "newhomeinfo");
		var newsigninfo := { };
		newsigninfo[1]  := who.serial;
		newsigninfo[2]  := infoarr[1];
		newsigninfo[3]  := infoarr[2];
		newsigninfo[4]  := infoarr[3];
		newsigninfo[5]  := infoarr[4];
		newsigninfo[6]  := infoarr[6];
		newsigninfo[7]  := infoarr[7];
		newsigninfo[8]  := infoarr[8];
		newsigninfo[9]  := infoarr[9];
		SetObjProperty(sign, "homeinfo", newsigninfo);
		
		if (!GetObjProperty(sign,"numlockdowns"))
			SetObjProperty(sign,"numlockdowns", infoarr[8]);
		endif
		
		if (!GetObjProperty(sign,"numsecure"))
			SetObjProperty(sign,"numsecure",    infoarr[9]);
		endif
		
		SetObjProperty(sign, "builtdeed", created.serial);
		SetObjProperty(created, "homeinfo", infoarr);
		EraseObjProperty(sign, "friends");
		EraseObjProperty(sign, "coowners");
		EraseObjProperty(sign, "enemies");
		SetObjProperty(sign,"owneracct", (who.acctname));
		SendSysMessage( who, "You have taken ownership of the house.", color := 66);
		GumpPrompt(who, "A key has been placed in your backpack. The deed is in your bank box along with a spare key.");
		Sign.name := "A house sign";
		SetObjProperty( sign, "lastownername", who.name );
		
		// The following sets the decay time for 60 Real Life days.
		// Would like to move this to a settings.cfg file at some point.
		SetObjProperty(sign,"decay", (ReadGameClock() + CInt(get_abandon_time())));
		return 1;
    endif
    

  SetObjProperty(sign,"decay", (ReadGameClock()+ CInt(get_abandon_time())));
  var homeinfo := GetObjProperty(sign,"homeinfo");
  var oserial := homeinfo[1];  // the house owner...
  var nwx     := homeinfo[2];
  var nwy     := homeinfo[3];
  var sex     := homeinfo[4];
  var sey     := homeinfo[5];
  var result;
  SetPlaqueName( sign );
  Detach();
  
  if( who.serial == oserial )
    data[25] := who.name;
    SetObjProperty( sign, "lastownername", who.name );
  else
    data[25] := GetObjProperty( sign, "lastownername" );
  endif
  
  data[26] := GetObjProperty( sign, "numlockdowns" );
  data[27] := GetObjProperty( sign, "numsecure" );
  var coownerinfo := GetObjProperty(sign,"coowners");
  var friendinfo := GetObjProperty(sign,"friends");
  var enemyinfo := GetObjProperty(sign,"enemies");
  var i:=0;
  for (i:=1;i<=20;i:=i+1)
    var coownername := (SystemFindObjectBySerial(coownerinfo[i]).name);
    var friendname := (SystemFindObjectBySerial(friendinfo[i]).name);
    var enemyname := (SystemFindObjectBySerial(enemyinfo[i]).name);
    if (friendname == error)
      friendname := " ";
    endif
    if (enemyname == error)
      enemyname := " ";
    endif
    if (coownername == error)
      coownername := " ";
    endif
    data[i+27] := (friendname);
    data[(i+47)] := (enemyname);
    data[(i+67)] := (coownername);
  endfor
  var friend := 0;
  for (i:=1;i<=20;i:=i+1)
    var friendserial := friendinfo[i];
    var coownerserial := coownerinfo[i];
    if (friendserial == who.serial)
      friend := 1;
    endif
    if (coownerserial == who.serial)
      friend := 2;
    endif
  endfor
  if (friend == 1)
    result := SendDialogGump( who, friendlayout, data );
  elseif (friend == 2)
    result := SendDialogGump( who, coownerlayout, data );
  elseif ((friend == 0) && (who.cmdlevel < 3) && (who.serial != oserial))
    result := SendDialogGump( who, defaultlayout, data );
    return;
  else
	result := SendDialogGump( who, ownerlayout, data );
  endif
  case (result[0])
            1:var newname := RequestInput( who, sign, "Enter a name for this house." );
              if( (len(newname) > 17) )
                SendSysMessage( who, "House sign names may not be longer than 17 characters." );
              else
                SetName( sign, newname );
                SetObjProperty(sign,"signname",newname);
              endif
            2: ChangeInteriorLocks( who, sign, nwx, nwy, sex, sey );
            3: demolish( who, sign, nwx, nwy, sex, sey );
            4: AddFriend(sign, who);
            5: addenemy(sign, who);
            6: ChangeHouseLocks( who, sign, nwx, nwy, sex, sey );
            7: removefriend(who, sign, friendinfo[1]);
            8: removefriend(who, sign, friendinfo[2]);
            9: removefriend(who, sign, friendinfo[3]);
           10: removefriend(who, sign, friendinfo[4]);
           11: removefriend(who, sign, friendinfo[5]);
           12: removefriend(who, sign, friendinfo[6]);
           13: removefriend(who, sign, friendinfo[7]);
           14: removefriend(who, sign, friendinfo[8]);
           15: removefriend(who, sign, friendinfo[9]);
           16: removefriend(who, sign, friendinfo[10]);
           17: removefriend(who, sign, friendinfo[11]);
           18: removefriend(who, sign, friendinfo[12]);
           19: removefriend(who, sign, friendinfo[13]);
           20: removefriend(who, sign, friendinfo[14]);
           21: removefriend(who, sign, friendinfo[15]);
           22: removefriend(who, sign, friendinfo[16]);
           23: removefriend(who, sign, friendinfo[17]);
           24: removefriend(who, sign, friendinfo[18]);
           25: removefriend(who, sign, friendinfo[19]);
           26: removefriend(who, sign, friendinfo[20]);
           27: removeenemy(who, sign, enemyinfo[1]);
           28: removeenemy(who, sign, enemyinfo[2]);
           29: removeenemy(who, sign, enemyinfo[3]);
           30: removeenemy(who, sign, enemyinfo[4]);
           31: removeenemy(who, sign, enemyinfo[5]);
           32: removeenemy(who, sign, enemyinfo[6]);
           33: removeenemy(who, sign, enemyinfo[7]);
           34: removeenemy(who, sign, enemyinfo[8]);
           35: removeenemy(who, sign, enemyinfo[9]);
           36: removeenemy(who, sign, enemyinfo[10]);
           37: removeenemy(who, sign, enemyinfo[11]);
           38: removeenemy(who, sign, enemyinfo[12]);
           39: removeenemy(who, sign, enemyinfo[13]);
           40: removeenemy(who, sign, enemyinfo[14]);
           41: removeenemy(who, sign, enemyinfo[15]);
           42: removeenemy(who, sign, enemyinfo[16]);
           43: removeenemy(who, sign, enemyinfo[17]);
           44: removeenemy(who, sign, enemyinfo[18]);
           45: removeenemy(who, sign, enemyinfo[19]);
           46: removeenemy(who, sign, enemyinfo[20]);
           47: removecoowner(who, sign, coownerinfo[1]);
           48: removecoowner(who, sign, coownerinfo[2]);
           49: removecoowner(who, sign, coownerinfo[3]);
           50: removecoowner(who, sign, coownerinfo[4]);
           51: removecoowner(who, sign, coownerinfo[5]);
           52: addcoowner(sign, who);
    endcase
endprogram

function demolish( who, sign, nwx, nwy, sex, sey )
  var newsigninfo := {};
//  var homeinfo := GetObjProperty(sign,"homeinfo");
  var item := ListObjectsInBox( nwx, nwy, -50, sex, sey+1, 50, who.realm );
  var builtdeed := SystemFindObjectBySerial( GetObjProperty( sign, "builtdeed") );
  var ownerpack := EnumerateItemsInContainer(who.backpack);
  var inpack := 0;
  newsigninfo := GetObjProperty(builtdeed, "homeinfo");;
  foreach item in ownerpack
    if (item.serial == GetObjProperty( sign, "builtdeed"))
//      if (!MoveObjectToLocation(builtdeed, sign.x, sign.y, sign.z, sign.realm))
//        return;
//      endif
//      builtdeed.movable := 0;
      SetObjProperty(sign, "NewHouse", 1);
      inpack := 1;
    endif
  endforeach
  if (inpack == 0)
    SendSysMessage(who,"You must have the built deed in your backpack to abandon this house", color := 33);
    return;
  endif
  DestroyItem(builtdeed);
  foreach itemt in item
    if (GetObjProperty(itemt,"secure") ==1)
//      EraseObjProperty(itemt,"secure");
      if((GetObjProperty(itemt,"secure") == 1) && (itemt.movable == 0))
        var oldscript := GetObjProperty(itemt,"oldscript");
        if (oldscript == error)
          oldscript := "";
        endif
        itemt.usescript := oldscript;
        itemt.movable := 1;
        EraseObjProperty( itemt, "houseserial" );
        EraseObjProperty( itemt, "oldscript" );
        var newbox := SystemFindObjectBySerial( GetObjProperty( itemt, "boxserial") );
        var items := EnumerateItemsInContainer(newbox);
        foreach item in items
          MoveItemToContainer(item, itemt);
        endforeach
        DestroyItem(newbox);
        EraseObjProperty( itemt, "boxserial");
		EraseObjProperty(itemt,"secure");
      endif
    elseif ((GetObjProperty( itemt, "lockeddown" ) == 1) && (itemt.movable == 0))
      itemt.movable := 1;
      EraseObjProperty(itemt, "lockeddown");
      SetObjProperty( sign, "numlockdowns", GetObjProperty( sign, "numlockdowns") + 1 );
    elseif (GetObjProperty(itemt,"lockid"))
      itemt.locked := 0;
      EraseObjProperty(itemt,"lockid");
      EraseObjProperty(itemt,"decay");
    elseif ((itemt.movable == 0) && ((itemt.x != sign.x) && (itemt.y != sign.y)))
	if(!itemt.IsA(POLCLASS_DOOR))
	    DestroyItem(itemt);
	endif
    endif
  endforeach
  EraseObjProperty(sign,"owneracct");
  EraseObjProperty(sign,"friendinfo");
  EraseObjProperty(sign,"builtdeed");
  EraseObjProperty(sign,"decay");
  EraseObjProperty(sign,"lockid");
  EraseObjProperty(sign,"numsecure");
  EraseObjProperty(sign,"numlockdowns");
  EraseObjProperty(sign,"lastownername");
  SetObjProperty(sign, "newhomeinfo", newsigninfo);
  EraseObjProperty(sign,"homeinfo");
  sign.name := "For Sale: Priced at " + CInt(GetObjProperty(sign, "Price")) + " Gold Crowns";
  return;
endfunction

function SetPlaqueName( sign )
  var signname := GetObjProperty(sign,"signname");
  if(!signname)
    signname := "";
  endif
  var split := SplitWords( signname );
  var j;
  for( j := 1; j <= 5; j := j + 1 )
    if( !split[j] )
      split[j] := "";
    endif
  endfor
  if( len(signname) <= 12 )
    data[1] := signname;
  elseif( (len(split[1]) + len(split[2]) + len(split[3]) + 2) <= 12 )
    data[1] := split[1] + " " + split[2] + " " + split[3];
    data[2] := split[4] + " " + split[5];
  elseif( len(split[1]) + len(split[2]) + 1 <= 12 )
    data[1] := split[1] + " " + split[2];
    data[2] := split[3] + " " + split[4] + " " + split[5];
  elseif( len(split[1]) <= 12 )
    data[1] := split[1];
    data[2] := split[2] + " " + split[3] + " " + split[4] + " " + split[5];
  endif
endfunction

function ChangeHouseLocks( who, house, nwx, nwy, sex, sey )
  SendSysMessage( who, "Target the new master key." );
  var newkey := Target( who, "" );
  if( (newkey.objtype >= KEYSTART) && (newkey.objtype <= KEYEND) && (newkey.objtype != KEYRING) )
    var lockid := AllocLockId();
    var box := ListObjectsInBox( nwx, nwy, -50, sex, sey, 50, who.realm );
    SetObjProperty( newkey, "lockid", lockid );
    foreach item in box
      if( ((item.objtype >= UOBJECT_DOORS_START) && (item.objtype <= UOBJECT_DOORS_END)))
        if (Distance(house, item) <= 2);
          item.locked := 1;
          SetObjProperty(item, "lockid", lockid);
        endif
      elseif( (item.objtype == UOBJECT_BRASS_SIGN) || (item.objtype == UOBJECT_WOOD_SIGN) )
        SetObjProperty(item, "lockid", lockid);
      endif
    endforeach
    SendSysMessage( who, "Locks Changed." );
  else
    SendSysMessage( who, "That is not a key!" );
  endif
endfunction

function ChangeInteriorLocks( who, house, nwx, nwy, sex, sey )
    var box := ListObjectsInBox( nwx, nwy, -50, sex, sey, 50, who.realm );
    var doorcfg := ReadConfigFile("::doordesc");
    foreach item in box
      var arry := GetConfigStringKeys(doorcfg);
      foreach entry in arry
        if((CInt(entry) == item.objtype) && (Distance(house, item) >= 3))
          var lockid := AllocLockId();
          SendSysMessage( who, "Target the new master key." );
          var newkey := Target( who, "" );
          if (!newkey)
            SendSysMessage(who, "canceled");
            return;
          endif
          if( (newkey.objtype >= KEYSTART) && (newkey.objtype <= KEYEND) && (newkey.objtype != KEYRING) )
            SetObjProperty( newkey, "lockid", lockid );
            item.locked := 1;
            SetObjProperty(item, "lockid", lockid);
            SendSysMessage( who, "The lock has been changed." );
          else
            SendSysMessage( who, "That is not a key!" );
            return;
          endif
        endif
      endforeach
    endforeach
endfunction

function AddFriend( sign, who )
  var friendinfo := GetObjProperty(sign,"friends");
  if (!friendinfo)
    friendinfo := {};
  endif
  var arraysize := len(friendinfo);
  arraysize := arraysize + 1;
  if (arraysize > 20)
    SendSysMessage(who," your house cant support any more friends");
    return;
  endif
  SendSysMessage( who, "Target Friend." );
  var targetchr := Target( who, "");
  var ind := returnindex(friendinfo, targetchr.serial);
  if (ind > 0)
    SendSysMessage(who, "that person is already a friend");
    return;
  elseif (GetMana(targetchr) == error)
    SendSysMessage(who, "you cant friend that!");
    return;
  elseif (targetchr.npctemplate)
    SendSysMessage(who, "you can only friend players!");
    return;
  endif
  if(!targetchr)
    SendSysMessage( who, "Cancelled." );
    return;
  endif
  friendinfo[arraysize] := targetchr.serial;
  SetObjProperty( sign, "friends", friendinfo);
  SendSysMessage( who, "Friend Added." );
endfunction

function addenemy( sign, who )
  var enemyinfo := GetObjProperty(sign,"enemies");
  if (!enemyinfo)
    enemyinfo := {};
  endif
  var arraysize := len(enemyinfo);
  arraysize := arraysize + 1;
  if (arraysize > 20)
    SendSysMessage(who," your house cant support any more enemies");
    return;
  endif
  SendSysMessage( who, "Target enemy." );
  var targetchr := Target( who, TGTOPT_NOCHECK_LOS);
  var ind := returnindex(enemyinfo, targetchr.serial);
  if (ind > 0)
    SendSysMessage(who, "that person is already an enemy");
    return;
  elseif( targetchr.serial == who.serial)
    SendSysMessage(who, "that person is a friend.");
    return;
  elseif (GetMana(targetchr) == error)
    SendSysMessage(who, "you cant make that an enemy!");
    return;
  elseif (targetchr.npctemplate)
    SendSysMessage(who, "only players may be enemies!");
    return;
  endif
  if(!targetchr)
    SendSysMessage( who, "Cancelled." );
    return;
  endif
  enemyinfo[arraysize] := targetchr.serial;
  SetObjProperty( sign, "enemies", enemyinfo);
  SendSysMessage( who, "enemy Added." );
endfunction

function addcoowner( sign, who )
  var coownerinfo := GetObjProperty(sign,"coowners");
  if (!coownerinfo)
    coownerinfo := {};
  endif
  var arraysize := len(coownerinfo);
  arraysize := arraysize + 1;
  if (arraysize > 20)
    SendSysMessage(who," your house cant support any more co-owners");
    return;
  endif
  SendSysMessage( who, "Target co-owner." );
  var targetchr := Target( who, TGTOPT_NOCHECK_LOS);
  var ind := returnindex(coownerinfo, targetchr.serial);
  if(ind > 0)
//  if ((ind > 0) or ( targetchr.serial = who.serial))
    SendSysMessage(who, "that person is already a co-owner");
    return;
  elseif (GetMana(targetchr) == error)
    SendSysMessage(who, "you cant make that a co-owner!");
    return;
  elseif (targetchr.npctemplate)
    SendSysMessage(who, "only players may be co-owners!");
    return;
  endif
  if(!targetchr)
    SendSysMessage( who, "Cancelled." );
    return;
  endif
  coownerinfo[arraysize] := targetchr.serial;
  SetObjProperty( sign, "coowners", coownerinfo);
  SendSysMessage( who, "co-owner Added." );
endfunction

function returnindex(friendinfo, information)
      var i;
      for (i := 1; i <= len(friendinfo); i := i + 1)
            if (friendinfo[i] == information)
                  return i;
            endif
      endfor
      return 0;
endfunction

function removefriend(who, house, information )
  var friendinfo := GetObjProperty(house,"friends");
  var ind := returnindex(friendinfo, information);
  if (ind == 0)
    SendSysMessage(who, "that slot doesnt contain a friend");
    return;
  endif
  friendinfo.erase(ind);
  SetObjProperty( house, "friends", friendinfo);
  SendSysMessage(who, "your former friend has been removed");
endfunction

function removecoowner(who, house, information )
  var coownerinfo := GetObjProperty(house,"coowners");
  var ind := returnindex(coownerinfo, information);
  if (ind == 0)
    SendSysMessage(who, "that slot doesnt contain a co-owner");
    return;
  endif
  coownerinfo.erase(ind);
  SetObjProperty( house, "coowners", coownerinfo);
  SendSysMessage(who, "your former co-owner has been removed");
endfunction

function removeenemy(who, house, information )
  var enemyinfo := GetObjProperty(house,"enemies");
  var ind := returnindex(enemyinfo, information);
  if (ind == 0)
    SendSysMessage(who, "that slot doesnt contain a friend");
    return;
  endif
  enemyinfo.erase(ind);
  SetObjProperty( house, "enemies", enemyinfo);
  SendSysMessage(who, "your former enemy has been removed");
endfunction

function CreateBuiltDeed( who, sign, bankbox)
    var builtdeed := CreateItemInContainer( bankbox, 0x160fe );
    if (!builtdeed)
      PrintTextAbovePrivate( who, "Your backpack is too full!", who );
      return 0; // not built
    endif
    SetName(builtdeed, "a static house at " + sign.x + ", " + sign.y + ", " + sign.z + ", " + sign.realm + "." );
    SetObjProperty(sign,"builtdeed", builtdeed.serial);
    SetObjProperty(builtdeed, "Price", GetObjProperty(sign, "Price"));
    return builtdeed;
endfunction


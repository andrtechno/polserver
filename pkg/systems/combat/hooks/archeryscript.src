use uo;
use os;
use util;
use basic;
use cfgfile;

include ":attributes:attributes";
include "include/client";
include ":charclasses:classes";

var cWeapon := ReadConfigFile(":*:itemdesc");
var weaponElement;
var weapon;
var arrowElement;
var classId;
var cNPC := ReadConfigFile("::npcdesc");

program archeryScript(params)
    print("hook archeryScript");
	var attacker := params[1];
	weapon := params[2];
	var defender := params[3];

	weaponElement := FindConfigElem(cWeapon, Weapon.objtype);

	classId := CInt(GetObjProperty(attacker,"classid"));

	Sleep(CInt(Distance(attacker, defender) / 5));

	if (!CheckAmmunition(attacker, weapon) )
		SendSysMessage(attacker, "You are out of ammunition.", color := 33);
		return 1;
	endif

	PerformAction(attacker, CInt(weaponElement.Anim) );
	PlayMovingEffect(attacker, defender, weaponElement.ProjectileAnim, 10);

	if (!CheckToHit(attacker, defender) )
	    PlaySoundEffect(attacker, CInt(weaponElement.MissSound) );
		return 1;
	endif
	var damageRoll;
	damageRoll := FindDamage(attacker, weapon, defender);

	var rawdamage:=CInt(damageRoll[3]);
    /*var dmg_mod := weapon.dmg_mod;
    if(dmg_mod > 0)
        var per := dmg_mod;
        dmg_mod := (rawdamage / 100) * per;
        dmg_mod := dmg_mod + per;

        dmg_mod:=RandomIntMinMax((dmg_mod - per),dmg_mod);
    endif*/

	var classLevel := CInt(GetObjProperty(attacker,"classlevel"));
	if(classLevel)
	   // rawdamage := rawdamage + (classLevel * 5);
	endif



    if(classId)
        if(classId != ID_RANGER)
            rawdamage := 1;
        endif
    endif


	var hitParams := {
		attacker,
		defender,
		weapon,
		CInt(damageRoll[1]),	// armor
		CInt(damageRoll[2]),	// basedamage
		rawdamage		// rawdamage
	};

	Start_Script(":combat:archeryHitScript", hitParams);
	return 1;

endprogram


function CheckAmmunition(who, weapon);

	var ammoType := CInt(GetObjProperty(weapon, "AmmoType"));
	if (!ammoType)
		ammoType := weaponElement.ProjectileType;
		print(ammoType);
		if (!ConsumeSubstance(who.backpack, ammoType, 1) )
			SendSysMessage(who, "You are out of ammunition.", color := 33);
			return 0;
		endif

	else

		if (!ConsumeSubstance(who.backpack, ammoType, 1) )
			SendSysMessage(who, "Switching to normal ammunition...", color := 33);
			EraseObjProperty(weapon, "AmmoType");
			EraseObjProperty(weapon, "MissleHit");
			return 0;
		endif
	endif
	arrowElement := cWeapon[ammoType];
	return 1;

endfunction


// ToHit Algorithm:
//
// % Success = 100 - (Sqrt(100 - Skill Level) * 10), max @ 95%
// Range > 2/3 of max = 20% more difficult to hit
// Range < 1/3 of max = 20% easier to hit
// if defender dex > attacker tacs, 20% harder to hit.

function CheckToHit(attacker, defender);

	var aSkill := GetAttribute(attacker, "Archery");
	var range := Distance(attacker, defender);
	var success := CInt(150 - (Sqrt(150.0 - aSkill) * 10.0) );
print("success start: "+success);
print("range: "+range);



	if (range > (CInt(weaponElement.maxrange) * 0.66) )
		success := CInt(success * 0.80);
	elseif (range < (CInt(weaponElement.maxrange) * 0.33) )
		success := CInt(success * 1.20);
	endif

	if (GetAttribute(defender, "Dexterity") > GetAttribute(attacker, "Tactics") )
		AwardPoints(attacker, SKILLID_TACTICS, CInt(GetAttribute(defender, "Dexterity")) );
		//success := success * 0.80;
	else
		AwardPoints(attacker, SKILLID_TACTICS, CInt(GetAttribute(defender, "Dexterity") / 2) );
	endif

	if (success < 1)
		success := 1;
	elseif (success > 80)
		success := 80;
	endif
print("success: "+success);


    //Bow
    if(Weapon.objtype == 0x13B2)
        success := success - (range * 2);
    elseif(Weapon.objtype == 0xF4F) //Crossbow
        success := success - (range * 1);
    elseif(Weapon.objtype == 0x13FD) //HeavyCrossbow
        success := success - (range);
    endif


    if(classId)
        if(classId != ID_RANGER)
            success := 10;
        endif
    endif

print("success final: "+success);
	var hitRoll := RandomDiceRoll("1d100");
print("hitRoll: "+hitRoll);
	if (HitRoll <= success)
		var defenderShield := GetEquipmentByLayer(defender, 0x02);
		if (defenderShield.isa(POLCLASS_ARMOR))
			var pSkill := GetAttribute(defender, "Parry");
			var hitRate := success - HitRoll;
			var parrySuccess := CInt(150 - (Sqrt(150.0 - pSkill) * 10.0) ) - hitRate + CInt(defenderShield.ar);
			print("parrySuccess start: "+parrySuccess);
			if (parrySuccess < 5)
				parrySuccess := 5;
			elseif (parrySuccess > 90)
				parrySuccess := 90;
			endif
			var parryRoll := RandomDiceRoll("1d100");
			print("parrySuccess: "+parrySuccess);
			if (parryRoll <= parrySuccess)
				AwardPoints(defender, SKILLID_PARRYING, (110 - parrySuccess) );
				PlaySoundEffect(defender, 0x141);
				return 0;
			endif
		endif
		AwardPoints(attacker, SKILLID_ARCHERY, CInt(120 - success) );
		PlaySoundEffect(defender, weaponElement.ProjectileSound);
		SkillCheck(attacker, ARCHERY, 10, 10);
		return 1;
	else
		AwardPoints(attacker, SKILLID_ARCHERY, 15 );
		return 0;
	endif

endfunction

// odds for hitting locations:
//
// --LOC--	LAYER	ODDS	D. MOD
// Head		0x06	07%		125%
// Hands	0x07	05%		75%
// Neck		0x0a	03%		125%
// Body		0x0d	44%		100%
// Arms		0x13	15%		75%
// Legs		0x04	20%		100%
// Feet		0x03	06%		75%

// Return variables are:
// armor			an armor object or an NPC object
// dRoll			base damage
// dRoll - aRoll	raw damage

function FindDamage(attacker, weapon, defender)

	var qualityMod := weapon.quality;
	if (qualityMod > 1.25)
		qualityMod := 1.25;
	endif

	var test := "1d30+10";
    //CStr(weaponElement.Damage)
	var dRoll := CInt(RandomDiceRoll(test) * qualityMod);

print("dRoll---: "+dRoll);
	var hitLoc;
	var lRoll := RandomDiceRoll("1d100");
	if (lRoll > 93)
		hitLoc := 0x06;			// HEAD
		dRoll := CInt(dRoll * 1.25);
	elseif (lRoll > 88)
		hitLoc := 0x07;			// HANDS
		dRoll := CInt(dRoll * 0.75);
	elseif (lRoll > 85)
		hitLoc := 0x0a;			// NECK
		dRoll := CInt(dRoll * 0.75);
	elseif (lRoll > 41)
		hitLoc := 0x0d;			// CHEST
	elseif (lRoll > 26)
		hitLoc := 0x13;			// ARMS
		dRoll := CInt(dRoll * 0.75);
	elseif (lRoll > 6)
//		hitLoc := 0x18;			//  Original layer for armour on legs
		hitLoc := 0x04;			// LEGS
	else
		hitLoc := 0x03;			// FEET
		//dRoll := CInt(dRoll * 0.75);
	endif

	//dRoll := CInt(dRoll * (1.0 + (CDbl(GetAttribute(attacker, "Anatomy")) / 200.0)) );

	var armor := GetEquipmentByLayer(defender, hitLoc);

	var armorElement;
	var aRoll;

	// If there's a piece of armour equipped on that layer then get its AR and calc a value from half its AR to its full AR
	if (armor.isa(POLCLASS_ARMOR) )
		armorElement := FindConfigElem(cWeapon, armor.objtype);
		aRoll := CInt(RandomInt(CInt(armorElement.ar) / 2) + (CInt(armorElement.ar) / 2) );

	else
	// If not then are we dealing with a non-human NPC that has an intrinsic aarmour rating?
		if (defender.isa(POLCLASS_NPC) )
			armorElement := FindConfigElem(cNPC, CStr(defender.npctemplate) );
			armor := defender;
			aRoll := CInt(RandomInt(CInt(armorElement.ar) / 2) + (CInt(armorElement.ar) / 2) );
		endif
	endif

	if ( (arrowElement.DamageEffect == "piercing") and (aRoll > 5) )
		var pierce := (0.5 + (RandomDiceRoll("3d10") / 40.0) );
		if (pierce < 1.0)
			PrintTextAbove(defender, "The missile pierces " + CStr(defender.name) + "'s armor!");
			aRoll := CInt(aRoll * pierce) ;
		endif
	endif

	if (aRoll >= dRoll)
		aRoll := dRoll;
	elseif ( (arrowElement.DamageEffect == "bleeding") and (dRoll >= (aRoll * 1.75) ) )
		PrintTextAbove(defender, "The missile tears through " + CStr(defender.name) + "'s body!");
		dRoll := CInt(dRoll * 1.25);
	endif

    var dmg_mod := weapon.dmg_mod;
    if(dmg_mod > 0)
        var per := dmg_mod;
        dmg_mod := (dRoll / 100) * per;
        dmg_mod := dmg_mod + per;

        dRoll:=dmg_mod;
    endif

    if (GetAttribute(attacker, "Archery"))
	    dRoll:=dRoll + (GetAttribute(attacker, "Archery") / 10);
	endif


	if (GetAttribute(attacker, "Strength"))
	    //dRoll:=dRoll + (GetAttribute(attacker, "Strength") / 10);
	endif
    if (GetStrength(attacker))
	    dRoll:=dRoll + (GetStrength(attacker) / 10);
	endif

    //Сделать чтобы поизон стрелы стреляли по 1 хп, а обычные чтобы давали урон
    if (GetObjProperty(Weapon, "MissileHit"))
        dRoll:=1;
    endif

    var d:=CInt(aRoll) - CInt(dRoll);
    if(d <= 0)
        d:=1;
    endif;

	//return ({armor, CInt(dRoll), (d + (weapon.hp / 2))});
	return ({armor, CInt(dRoll), CInt(dRoll) - CInt(aRoll)});
endfunction
use uo;
use os;
use cfgfile;

include "include/client";
include ":attributes:attributes";
include ":damage:damage";
include ":itemUtils:itemtypes";
include ":combatBook:combatAbility";

const EVID_UNEQUIP   := 0x123456;

program unequip(who, item)
    set_critical(1);
    var itemdesc := ReadConfigFile("itemdesc");
    var penalty := CInt(itemdesc[item.objtype].DexPenalty);
    if(penalty)
        EraseObjProperty(item, "#equipped");
        AP_SetStatMod(who, DEXTERITY, AP_GetStatMod(who, DEXTERITY) + penalty);
    endif
    var type := GetObjProperty(item,"type");
    var val := 0;
    case(type)
        "accuracy":     val := accuracy(who,item);
        "cursed":       val := cursed(who,item);
        "sight":        val := sight(who,item);
        "reflect":      val := reflect(who,item);
        "protection":   val := protection(who,item);
        "wizzohat":     val := wizzohat(who,item);
        "strength":     val := strengthRemove(who,item);
        "invisibility": val := invisibility(who, item);
        default:        val := 1;
    endcase
    var temp;
	temp := CInt(GetObjProperty( item, "ArBonus" ));
	if( temp )
		who.ar_mod := who.ar_mod - temp;
	endif

	//Ability
    var combatAbility := CInt(GetObjProperty(who, "Ability"));
    if(combatAbility)
        RemoveAbility(who);
    endif

    var skillid := CInt(GetObjProperty(item, "skilladv"));
    if ( skillid)
        var skillnum := AP_SkillIdToAttributeName(skillid);

        //var power := GetObjProperty(who, "currsk" + Cstr(item.serial));
		var power    := CInt(GetObjProperty( item, "skilladvamount" ));
        //if(power)
            if(GetAttributeTemporaryMod(who, skillnum))
                //AlterSkillTemporaryMod( who, skillnum, (0 - power ));
                		if(item.isa(POLCLASS_WEAPON))
                			power := power * 5;
                		endif
                AP_SetSkillMod(who,skillnum,AP_GetSkillMod(who,skillnum) - power);

            endif
           // EraseObjProperty(who, "currsk" + Cstr(item.serial));
        //endif
    endif


DoStatMods(who, item);
UndoProt(who, item);
UndoImmunity( who, item );
//UndoHitChance(who, item);
  // if(item.resist_physical)
    // ModifyResistance(who, RES_PHYSICAL, item.resist_physical * -1);
  // endif
  // if(item.resist_fire)
    // ModifyResistance(who, RES_FIRE, item.resist_fire * -1);
  // endif
  // if(item.resist_cold)
    // ModifyResistance(who, RES_COLD, item.resist_cold * -1);
  // endif
  // if(item.resist_poison)
    // ModifyResistance(who, RES_POISON, item.resist_poison * -1);
  // endif
  // if(item.resist_energy)
    // ModifyResistance(who, RES_ENERGY, item.resist_energy * -1);
  // endif

  // if(item.damage_physical)
    // ModifyDamage(who, DMG_PHYSICAL_MOD, item.damage_physical * -1);
  // endif
  // if(item.damage_fire)
    // ModifyDamage(who, DMG_FIRE_MOD, item.damage_fire * -1);
  // endif
  // if(item.damage_cold)
    // ModifyDamage(who, DMG_COLD_MOD, item.damage_cold * -1);
  // endif
  // if(item.damage_poison)
    // ModifyDamage(who, DMG_POISON_MOD, item.damage_poison * -1);
  // endif
  // if(item.damage_energy)
    // ModifyDamage(who, DMG_ENERGY_MOD, item.damage_energy * -1);
  // endif

  if( item.IsA( POLCLASS_WEAPON ) )
    SetObjProperty( who, "#LastWeapon", item.serial );
  endif
    EraseObjProperty( item, "EquippedAlready" );
  return val;
  set_critical(0);
endprogram

function UndoHitChance(who, item)
who.hit_chance_mod := -100;
endfunction


function strengthRemove(who,item)
  RemoveMods(who, item);
  return 1;
endfunction

function wizzohat(who,item)
  AP_SetStatMod(who, INTELLIGENCE, AP_GetStatMod(who, INTELLIGENCE) - 10);
  AP_SetStatMod(who, STRENGTH, AP_GetStatMod(who, STRENGTH) + 5);
  AP_SetStatMod(who, DEXTERITY, AP_GetStatMod(who, DEXTERITY) + 5);
  EraseObjProperty(item, "#equipped");
  return 1;
endfunction

function cursed(who,item)
// Someday items will have a cursed property and this function will be relevant.
who := who;
item := item;
  return 0;
endfunction

function invisibility(who,item)
  RemoveMods(who, item);
  return 1;
endfunction

function sight(who,item)
  RemoveMods(who, item);
  return 1;
endfunction

function reflect(who,item)
  RemoveMods(who, item);
  return 1;
endfunction

function accuracy(who,item)
  if(GetObjProperty(item, "#equipped") == who.serial)
    var amt := CInt(GetObjProperty(item,"gain"));
    amt := (0 - amt);
    if((!amt) || (amt == 0))
      amt := (0 - 5);
    endif
    var cfg := ReadConfigFile(":combat:itemdesc");
    var attrib := cfg[item.objtype].Attribute;
    case(attrib)
      "Wrestling": ModifyAttributeTemporaryMod(who, WRESTLING,     amt);
      "Fencing":   ModifyAttributeTemporaryMod(who, FENCING,       amt);
      "Archery":   ModifyAttributeTemporaryMod(who, ARCHERY,       amt);
      "Swords":    ModifyAttributeTemporaryMod(who, SWORDSMANSHIP, amt);
      "Mace":      ModifyAttributeTemporaryMod(who, MACEFIGHTING,  amt);
    endcase
    EraseObjProperty(item, "#equipped");
    return 1;
  else
    return 1;
  endif

endfunction

function protection(who,item)
  RemoveMods(who, item);
  return 1;
endfunction

function RemoveMods(who, item)
  var proc := GetProcess(GetObjProperty(item, "Pid"));
  who := who;
  if(proc)
    var ev := {};
    ev.+type := EVID_UNEQUIP;
    proc.sendevent(ev);
  endif
  EraseObjProperty(item, "#equipped");
endfunction


function UndoImmunity( who, item )

	var equipped_matrix := GetObjProperty( who, "ImmunityMatrix" );
	if( !equipped_matrix )
		equipped_matrix := {};
	endif

	var prots := { "PermPoisonImmunity",
			 "PermMagicImmunity",
			 "Permmr",
			 "FireProtection",
			 "WaterProtection",
			 "AirProtection",
			 "EarthProtection",
			 "FreeAction",
			 "NecroProtection",
			 "HolyProtection",
			 "PhysicalProtection",
			 "HealingIncrease" };


	var i;
	for( i := 1; i <= len(prots); i := i + 1 )
		var protlvl := CInt( GetObjProperty( item, prots[i] ) );
		if( protlvl )
			var new_prot_vector := {};
			if( !equipped_matrix[i] )
				equipped_matrix[i] := {};
			endif

			var j := 1;
			var removed := 0;
			while( !removed && j <= len(equipped_matrix[i]) )
				if( protlvl == CInt( equipped_matrix[i][j] ) )
					removed := 1;
				else
					new_prot_vector.append( CInt(equipped_matrix[i][j]) );
				endif
				j := j + 1;
			endwhile

			while( j <= len(equipped_matrix[i]) )
				new_prot_vector.append( CInt(equipped_matrix[i][j]) );
				j := j + 1;
			endwhile

			if( CInt( GetObjProperty( who, prots[i] ) ) == protlvl )
				var maxl := 0;
				var minl := 0;

				foreach lvl in new_prot_vector
					if( lvl < minl )
						minl := lvl;
					elseif( lvl > maxl )
						maxl := lvl;
					endif
				endforeach

				if( minl )
					SetObjProperty( who, prots[i], minl );
				elseif( maxl )
					SetObjProperty( who, prots[i], maxl );
				else
					EraseObjProperty( who, prots[i] );
				endif
			endif

			equipped_matrix[i] := new_prot_vector;
		endif
	endfor

	SetObjProperty( who, "ImmunityMatrix", equipped_matrix );

endfunction

function DoStatMods(who,it)

	if ( CInt(GetObjProperty(it,"str")) )
	    SetStrengthMod(who,  CInt(GetStrengthMod(who)) - CInt(GetObjProperty(it,"str")));
	endif
	if ( CInt(GetObjProperty(it,"int")) )
		SetIntelligenceMod(who,  CInt(GetIntelligenceMod(who)) - CInt(GetObjProperty(it,"int")));
	endif
	if ( CInt(GetObjProperty(it,"dex")) )
		SetDexterityMod(who,  CInt(GetDexterityMod(who)) - CInt(GetObjProperty(it,"dex")));
	endif
	//if ( CInt(GetObjProperty(it,"DefaultDex")) )
	//	SetDexterityMod(who,  CInt(GetDexterityMod(who)) - CInt(GetObjProperty(it,"DefaultDex")));
	//endif

endfunction


function UndoProt( who, item )

	var equipped_matrix := GetObjProperty( who, "ProtectionMatrix" );
	if( !equipped_matrix )
		equipped_matrix := {};
	endif

	var prots := { "PoisonImmunity",
			 "MagicImmunity",
			 "SpellReflection" };

	var i;
	for( i := 1; i <= len(prots); i := i + 1 )
		if( GetObjProperty( item, prots[i] ) )
			var new_prot_vector := {};
			if( !equipped_matrix[i] )
				equipped_matrix[i] := {};
			endif

			foreach serial in (equipped_matrix[i])
				if( serial != item.serial )
					new_prot_vector.append( serial );
				endif
			endforeach

			if( len(new_prot_vector) )
				if( GetObjProperty( who, prots[i] ) == item.serial )
					SetObjProperty( who, prots[i], CInt(new_prot_vector[len(new_prot_vector)]) );
				endif
			else
				EraseObjProperty( who, prots[i] );
			endif

			equipped_matrix[i] := new_prot_vector;
		endif
	endfor

	SetObjProperty( who, "ProtectionMatrix", equipped_matrix );

endfunction
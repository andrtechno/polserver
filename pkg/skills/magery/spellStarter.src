use uo;
use os;
use cfgfile;

include ":attributes:attributes";
include ":magery:spells";
include ":containers:containers";
include ":itemUtils:itemdesc";
include "include/client";
include "include/sounds";
include ":charclasses:classes";

program SpellStarter(params)
	var mobile := params[1]; // Caster
	var spell_id := params[2]; // Id # of the spell
	var scroll := params[3]; // Scroll ObjType being used
	var targ := params[4]; // NPC target used if NPC is casting the spell.
	var runebook := params[5]; // Used if casting recall or gate from a runebook.
	var no_regs__no_mana := params[6]; // If > 0 spell does not require regs and mana, for runebook back pages.
	// if (scroll == 1)
	// endif
	if ( !Attach(mobile) && !mobile.IsA(POLCLASS_NPC) )
		SendSysMessage(mobile, "You are already doing something.", color := MESSAGE_COLOR_BAD);
		return 0;
	endif


    //if(TS_GetTimerInfo(mobile, "TargetControl"))
	//	SendSysMessage(mobile, "You have already done something.111111", color := MESSAGE_COLOR_BAD);
	//	return 0;
    //endif
    var x := mobile.x;
    var y := mobile.y;

    var is_mage := CInt(GetObjProperty( mobile, CLASSEID_MAGE ));
    var is_fighter := CInt(GetObjProperty( mobile, CLASSEID_WARRIOR ));
    var is_crafter := CInt(GetObjProperty( mobile, CLASSEID_CRAFTER ));
    var is_thief := CInt(GetObjProperty( mobile, CLASSEID_THIEF ));
    var is_ranger := CInt(GetObjProperty( mobile, CLASSEID_RANGER ));
    var is_bard := CInt(GetObjProperty( mobile, CLASSEID_BARD ));

	var spell_elem := MS_GetSpellsCfgElem(spell_id);
	var manacost := CInt(spell_elem.ManaCost);
	// If spell is set to 'TestOnly 1', then it requires cmdlevel or #SpellTester CProp before it can be used.
	if ( spell_elem.TestOnly and !mobile.cmdlevel )
		// TestOnly spell, check for #SpellTester
		if ( !GetObjProperty(mobile, "#SpellTester") )
			SendSysMessage(mobile, "This spell has been temporarily disabled.", color := MESSAGE_COLOR_BAD);
			FailSpell(mobile);
			return 0;
		endif
	elseif ( spell_elem.NPCOnly && !mobile.npctemplate )
		PrintTextAbove(mobile, "Unable to cast - NPC only spell.");
		return 0;
	endif
    if(!mobile.IsA(POLCLASS_NPC))
        if ( spell_elem.OnlyMage )
            if (is_fighter || is_crafter || is_thief || is_ranger || is_bard)
                SendSysMessage(mobile, "You not class mage.", color := MESSAGE_COLOR_BAD);
                return 0;
            endif
        endif
        if(!runebook)
            if ( CInt(GetAttribute(mobile, MAGERY)) < CInt(spell_elem.MinSkill))
                SendSysMessage(mobile, "This spell requires a minimum of "+CInt(spell_elem.MinSkill)+" skills.", color := MESSAGE_COLOR_BAD);
                return 0;
            endif
        endif
    endif






	// Perform various checks to see if mobile can perform the spell
	var requires_mana := 1;
	var requires_regs := 1;
	var settings_elem := MS_GetSettingsCfgElem("Settings");
	// Check for scroll casting requirements for reagents and mana for players.
	if(scroll && (mobile.cmdlevel >= CInt(settings_elem.StaffCmdLvl)))
		requires_mana := CInt(settings_elem.StaffRequiresMana);
		requires_regs := CInt(settings_elem.StaffRequiresReagents);
	elseif(scroll && !mobile.cmdlevel)
		requires_mana := CInt(settings_elem.PlyrScrollsReqMana);
		requires_regs := CInt(settings_elem.PlyrScrollsReqRegs);
	endif
	// Check for staff requirement of reagents and mana for casting spells.
	if ( !mobile.IsA(POLCLASS_NPC) && (mobile.cmdlevel >= CInt(settings_elem.StaffCmdLvl)) && !scroll )
		requires_mana := CInt(settings_elem.StaffRequiresMana);
		requires_regs := CInt(settings_elem.StaffRequiresReagents);
	// Check for player requirement of reagents and mana for casting spells.
	elseif(!mobile.IsA(POLCLASS_NPC) && !scroll )
		requires_mana := CInt(settings_elem.PlyrSpellsReqMana);
		requires_regs := CInt(settings_elem.PlyrSpellsReqRegs);
	else // This is an NPC casting the spell
		requires_regs := 0;
		requires_mana := 1;
	endif
	// This check for casting from back pages of a runebook.
	if( !no_regs__no_mana )
        requires_regs := 1;
        requires_mana := 1;
    endif
    if( mobile.IsA(POLCLASS_NPC) )
        requires_regs := 0;
        requires_mana := 1;
    endif

	if ( GetObjProperty(mobile, "#Casting") )
		SendSysMessage(mobile, "You cannot cast right now.", color := MESSAGE_COLOR_BAD);
		return 0;
	elseif ( mobile.frozen )
		SendSysMessage(mobile, "You cannot cast a spell while frozen.", color := MESSAGE_COLOR_BAD);
		FailSpell(mobile);
		return 0;
	elseif ( mobile.paralyzed )
		SendSysMessage(mobile, "You cannot cast a spell while paralyzed.", color := MESSAGE_COLOR_BAD);
		FailSpell(mobile);
		return 0;
	elseif ( mobile.squelched && !mobile.npctemplate )
		SendSysMessage(mobile, "Something prevents you from casting.", color := MESSAGE_COLOR_BAD);
		FailSpell(mobile);
		return 0;
	elseif ( !EquipmentCheck(mobile) )
		SendSysMessage(mobile, "Your hands must be free to cast spells.", color := MESSAGE_COLOR_BAD);
		FailSpell(mobile);
		return 0;
	endif


	if ( requires_mana )
	// Added to support necro spell mind rot.
		if(GetObjProperty(mobile, "#mindrot"))
			if(mobile.isA(POLCLASS_NPC))
				manacost := manacost * 2;
			else
				manacost := manacost * 1.25;
			endif
		endif
		if ( !AP_ConsumeVital(mobile, VITALID_MANA, manacost) )
			SendSysMessage(mobile, "You don't have enough mana to cast that spell!");
			FailSpell(mobile);
			return 0;
		endif
	endif

	if ( requires_regs )
		if ( !CheckReagents(mobile, spell_elem, scroll) )
			SendSysMessage(mobile, "You don't have the proper reagents.", color := MESSAGE_COLOR_BAD);
			FailSpell(mobile);
			return 0;
		endif
	endif
    //print("requires_mana "+requires_mana);
    //print("requires_regs "+requires_regs);
	// might want to send events to this script
	SetObjProperty(mobile, "#Casting", GetPid());


	//mobile.frozen := 1;
	mobile.hidden := 0;
	EraseObjProperty(mobile, "#Medding");
	//EraseObjProperty(mobile, "#ISMEDITATING");

	SpeakPowerWords(mobile, spell_id);
	var delay := spell_elem.Delay;
	var classLevel := CInt(GetObjProperty(mobile,"classlevel"));
	if(classLevel)
	    var rate := classLevel * 100;
	    delay:= delay - rate;
	endif
	// Perform casting animation
        var circ := spell_elem.Circle + 1; // adding one to circle to get cast repetitions.
        var rep;
        circ := CInt(circ/2);

        //for (rep := 1; rep <= circ; rep := rep + 1)
            case ( Lower(spell_elem.Target) )
                    "none":
                    "direct":
                            PerformAction(mobile, ANIM_CAST_DIR);
                            break;
                    "area":
                    "summon":
                            PerformAction(mobile, ANIM_CAST_AREA);
                            break;
                    default:
                            PerformAction(mobile, ANIM_CAST_DIR);
            endcase
            Sleepms (delay);
        //endfor


	var orig_hp := AP_GetVital(mobile, "Hits");

	var protection := GetObjProperty(mobile, "Protection");
        // Added to work around a problem with mages being unable to cast while under the influence of
        // strength mods.
//	if ( AP_GetStatMod(mobile, ATTRIBUTEID_STRENGTH) )
//		protection := 1;
//	endif

	var attribute := Lower(spell_elem.Attribute);

	if ( !attribute )
		attribute := MAGERY;
	endif

	var difficulty := CInt(spell_elem.Difficulty);

	if ( !difficulty )
		difficulty := -1;
	endif


    //difficulty := (CInt(AP_GetSkill(mobile, MAGERY)));

    SendSysMessage(mobile,"difficulty "+difficulty);

    var skill_check := 1;
    if(spell_id != 32) //if not recall spell
        //skill_check := SkillCheck(mobile, attribute, difficulty, 50);
	    skill_check := SkillCheck(mobile, attribute, difficulty, 1);
    endif


	// Added to support necro wraith form can recall regardless of their magery skill level.
	//if(GetObjProperty(mobile, "wraith") && spell_id == 32)
	//	skill_check := 1;
	//endif
	//mobile.frozen := 0;




	// skill_check > 0 on success
	if ( skill_check || mobile.IsA(POLCLASS_NPC))
		var info := struct;
		info.+script := spell_elem.script;
		info.+attribute := attribute;
		info.+skill_check := skill_check;
		info.+castspot := spell_elem.CastSpot;
		info.+targ := targ;
		info.+pid := GetPid();
		info.+spell_Id := spell_id;
		info.+circle := spell_elem.Circle;
		info.+spell_config := spell_elem;
		info.+damage_type := spell_elem.DamageType;
		info.+classlevel := classLevel;
		if(CInt(spell_elem.targetDelay))
		    info.+targetDelay := CInt(spell_elem.targetDelay);
		else
            info.+targetDelay := 0;
		endif


		if( runebook )
			info.runebook := runebook;
		endif
		// The following is for rune books.
		info.+no_target := 0;
		if( scroll == 1 )
			info.no_target := 1;
		endif
		info.+x := x;
		info.+y := y;

        if (!CheckCastSpot(mobile, info))
            return 0;
        endif
		var script := Start_Script(spell_elem.SpellScript, {mobile, info, spell_id, targ});
		Detach();
		EraseObjProperty(mobile, "#Casting");

		if ( script.errortext )
			Broadcast("Unable to start ["+spell_elem.SpellScript+"] -> "+script.errortext);
		endif

		var ev;

		while ( script.pid && !ev )
			ev := wait_for_event(1);
		endwhile
	else

	    // Plan to add chaoseffects here.
		PlaySoundEffect(mobile, SFX_SPELL_FAIL);
		SendSysMessage(mobile, "The spell fizzles.", color := MESSAGE_COLOR_BAD);
		PlayObjectCenteredEffect( mobile, 0x3735, 7, 7 );
	endif



//	MS_SpellDebug(mobile, "Spell starter completed.");
	EraseObjProperty(mobile, "#Casting");

	return 1;
endprogram

function EquipmentCheck(mobile)
    var hand1 := GetEquipmentByLayer(mobile, LAYER_HAND1);
	var hand2 := GetEquipmentByLayer(mobile, LAYER_HAND2);
    if(hand1.objtype in {0x2D25})
    	return 1;
    endif
    if(hand2.objtype in {0xE8A, 0x13F9})
    	return 1;
    endif
	// On OSI there are spell weaving weapons that mages can hold while casting spells
	// But they are not implemented yet. Maybe later.
	if ((hand1 && !hand1.IsA(POLCLASS_SPELLBOOK)) || (hand2 && !hand2.IsA(POLCLASS_SPELLBOOK)) )
		return 0;
	endif

	return 1;
endfunction

function CheckReagents(mobile, byref spell_elem, scroll)
	if ( mobile.npctemplate )
		// NPCs don't need reagents to cast.
		return 1;
	elseif ( scroll.IsA(POLCLASS_ITEM) )
		return SubtractAmount(scroll, 1);
	elseif ( scroll == 1 )
		// Scroll == 1 when called from runebooks, wands, etc to bypass reg requirements
		return 1;
	endif

	var reg_cost := GetConfigStringDictionary(spell_elem, "RegCost");

	// Before consuming, verify that there are enough regs.
	foreach amount in (reg_cost)
		amount := CInt(amount);
		if ( !amount )
			amount := 1;
		endif

		var objtype := GetObjTypeByName(_amount_iter);
		if(!objtype)
			objtype := CInt(_amount_iter);
		endif
		var properties := dictionary{"objtype"->objtype};
		if ( AmountInContainer(mobile.backpack, properties) < amount )
			if ( mobile.cmdlevel )
				SendSysMessage(mobile, "You do not have enough "+GetObjTypeDesc(objtype, (amount>1))+".");
			endif
			return 0;
		endif
		//SleepMS(2);
	endforeach

	// Consume reagents - CInt() and < 1 checks already done in previous loop.
	// Foreach is a pointer!
	foreach amount in (reg_cost)
	//print("_amount_iter "+_amount_iter);
		ConsumeSubstance(mobile.backpack, GetObjTypeByName(lower(_amount_iter)), amount);
		//SleepMS(2);
	endforeach

	return 1;
endfunction

function FailSpell(mobile)
	if(GetObjProperty(mobile, "#Casting"));
		mobile.frozen := 0;
	endif
	EraseObjProperty(mobile, "#Medding");
	EraseObjProperty(mobile, "#Casting");

	// The fizzle GFX is not suposed to play unless interrupted
	PlaySoundEffect(mobile, SFX_SPELL_FAIL);
    PlayObjectCenteredEffect( mobile, 0x3735, 7, 7 );

	return 1;
endfunction

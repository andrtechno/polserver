use os;
use uo;
use PolSys; //for packet;

include "include/bard";
include "include/client";
include "include/eventID";
include "include/objtype";
include ":charclasses:classes";

var configfile := ReadConfigFile("::npcdesc");

program bard_peacemake(who)
    EraseObjProperty(who, "IsMeditating");
    if(Cint(GetObjProperty(who, "LastPeace")) > ReadGameClock())
        SendSysMessage(who, "You must wait a moment before playing again.");
        return;
    endif
    SetObjProperty(who, "LastPeace", Cint(ReadGameClock() + 2));
    var instrument := findinstrument(who);
    if(!instrument)
    SendSysMessage(who, "You don't have an instrument to play!");
        return;
    endif
    if(!ReserveItem(instrument))
        return;
    endif


	var theobj;
    var elem;
	var difficulty;
	var range := CInt(AP_GetSkill(who,PEACEMAKING)/10);
	range := CInt( range * ClasseBonus( who ) );
	var affected	:= array;
	var max_diff	:= 0;

	foreach mobile in ListMobilesNearLocation( who.x, who.y, who.z, range )
		if(mobile != who )
			elem := FindConfigElem( configfile, mobile.npctemplate );
			if( !mobile.npctemplate ) // && !mobile.cmdlevel
				difficulty := CInt( GetIntelligence(mobile) );
			elseif( elem && !(elem.Privs == "invul") )
				difficulty := CInt( elem.provoke );
			else
				continue;
			endif

			if( !difficulty )
				difficulty := 100;
			elseif( difficulty > 150 )
				difficulty := 150;
			endif

			if( difficulty > max_diff )
				max_diff := difficulty;
			endif

			affected.append( { mobile, difficulty } );
		endif
	endforeach


	if( len(affected) )


		var sfx_success;
		var sfx_failure;
		case( instrument.graphic )
			UOBJ_HARP:	sfx_success := SFX_HARP_SUCC;
					sfx_failure := SFX_HARP_FAIL;
					break;

			UOBJ_LUTE:	sfx_success := SFX_LUTE_SUCC;
					sfx_failure := SFX_LUTE_FAIL;
					break;

			UOBJ_DRUM:	sfx_success := SFX_DRUM_SUCC;
					sfx_failure := SFX_DRUM_FAIL;
					break;

			UOBJ_TAMB:	sfx_success := SFX_TAMB_SUCC;
					sfx_failure := SFX_TAMB_FAIL;
					break;

			default:	PrintTextAbovePrivate( who, "That's not something you can play", who );
					return;
		endcase

		var succeeded	:= 0;
		var points_given := 0;
		var the_diff;
		var mobile;
		var points;

        var ev := Struct;
        ev.+ type;
        ev.type := EVID_PEACEMADE;
        var success := play(who, -1, instrument, PEACEMAKING);

		foreach element in affected
			mobile	 := element[1];
			the_diff := CInt( element[2] );
			if( the_diff == max_diff && !points_given )
				points := CInt( the_diff * 10 );
				points_given := 1;
			else
				points := 0;
			endif
            if(success)
                SendEvent(mobile, ev);
                succeeded := succeeded + 1;
                PrintTextAbove( mobile, mobile.name + " is dazzled by the beautiful music!" );
                mobile.warmode := 0;
	var war := CreatePacket(0x72, 0x05);
    war.SetInt8(0x01, 0);
    war.SendPacket(mobile);



        var pkt := CreatePacket(0x77, 17);

        pkt.SetInt32(1,mobile.serial); //player serial
        pkt.SetInt16(5,mobile.graphic); //model
        pkt.SetInt16(7,mobile.x); //x
        pkt.SetInt16(9,mobile.y); //y
        pkt.SetInt8(11,mobile.z); //z
        pkt.SetInt8(12,mobile.facing); //direction
        pkt.SetInt16(13,mobile.color); //skin color
        pkt.SetInt8(15,0); //flag
        pkt.SetInt8(16,2); //notoriety

        pkt.SendPacket(who);




            endif

		endforeach


		if( succeeded > 0 )
			PlaySoundEffect( who, sfx_success );
		else
			PlaySoundEffect( who, sfx_failure );
			PrintTextAbove( who, "*"+ who.name + " plays a musical instrument... poorly*" );
		endif
	else
		SendSysMessage( who, "There's nothing to calm down in range." );
		return;
	endif
endprogram
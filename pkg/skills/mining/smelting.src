use uo;
use os;

include "include/client";
include "include/objtype";
include "include/canAccess";
include ":attributes:attributes";

program smelt_that_ore (who, ore)
  EraseObjProperty(who, "IsMeditating");
  EraseObjProperty(who, "HealTimer");
  if(!can_access(who, ore))
    return;
  endif
  if(ore.movable == 0)
    SendSysMessage(who, "You cannot smelt that.");
    return;
  endif
  case(ore.objtype)
    UOBJ_ORE_COPPER:     SmeltOre(who, ore, UOBJ_INGOT_COPPER, 0);	// copper
    UOBJ_ORE_IRON:       SmeltOre(who, ore, UOBJ_INGOT_IRON, 60);	// icon
    UOBJ_ORE_STEEL:      SmeltOre(who, ore, UOBJ_INGOT_STEEL, 70);	// Steel
    UOBJ_ORE_ANRA:       SmeltOre(who, ore, UOBJ_INGOT_ANRA, 80);	// Anra
    UOBJ_ORE_VALORITE:   SmeltOre(who, ore, UOBJ_INGOT_VALORITE, 90);	// Valorite
    UOBJ_ORE_LAVAROCK:   SmeltOre(who, ore, UOBJ_INGOT_LAVAROCK, 95);	// Lavarock
    UOBJ_ORE_ICEROCK:    SmeltOre(who, ore, UOBJ_INGOT_ICEROCK, 100);	// Icerock
    UOBJ_ORE_SHADOW:     SmeltOre(who, ore, UOBJ_INGOT_SHADOW, 105);	// Shadow
    UOBJ_ORE_AZURITE:    SmeltOre(who, ore, UOBJ_INGOT_AZURITE, 110);	// Azurite
    UOBJ_ORE_DOOM:       SmeltOre(who, ore, UOBJ_INGOT_DOOM, 115);	// Doom
    UOBJ_ORE_BLUESTEEL:  SmeltOre(who, ore, UOBJ_INGOT_BLUESTEEL, 120);	// BlueSteel
    UOBJ_ORE_DARKRUBY:   SmeltOre(who, ore, UOBJ_INGOT_DARKRUBY, 128);	// darkruby
    UOBJ_ORE_CRYSTALIT:  SmeltOre(who, ore, UOBJ_INGOT_CRYSTALIT, 135);	// crystalit
    UOBJ_ORE_ONYX:       SmeltOre(who, ore, UOBJ_INGOT_ONYX, 140);	// onxy
    UOBJ_ORE_MIFRIL:     SmeltOre(who, ore, UOBJ_INGOT_MIFRIL, 145);	// mifril
    default: SendSysMessage(who,"You can't smelt that.");
  endcase
endprogram

function SmeltOre(who, ore, ingot, difficulty)
  if(!ReserveItem(ore))
    return;
  endif
  if(!Accessible(who, ore))
    SendSysMessage(who,"You can't reach that.");
    return;
  endif
  var forge := Target(who);
  if((forge.objtype == 0xfb1) || ((forge.objtype >= 0x197a) && (forge.objtype <= 0x19a9)))
    if(!CheckLineOfSight(who, forge))
      SendSysMessage(who,"you cant see that");
      return;
    endif
    if(Distance(who, forge) > 2)
      SendSysMessage(who,"that is too far away.");
      return;
    endif
    if(Distance(who, ore) > 2)
      SendSysMessage(who,"that is too far away.");
      return;
    endif
    if(SkillCheck(who, MINING, difficulty, ((difficulty / 2) + 10)))
      var ingots := CreateItemInBackpack(who, ingot, GetAmount(ore));
      ReserveItem(ingots);
      if(ingots)
        if(DestroyItem(ore))
          PlaySoundEffect(forge, 0x22);
          sleep(2);
          SendSysMessage(who,"You create some ingots and place them in your pack.");
	      return;
        else
          DestroyItem(ingots);
        endif
      endif
    else
      SubtractAmount(ore, 1);
	  SendSysMessage(who, "You destroy some ore.");
      return;
    endif
  else
    SendSysMessage(who, "That is not a forge.");
  endif
endfunction

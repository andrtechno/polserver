use cfgfile;
use uo;
use os;
use util;
use unicode;

include "include/client";
include ":attributes:attributes";
include "include/string";
include "include/objtype";
include "include/canAccess";
include "include/utility";
include "include/dist";
include ":itemutils:toolWear";
include "include/noto";
include "include/bowcraft";
include ":damage:damage";
include ":lumberjacking:lumber";


const UACTION_CHOP := 0x0d;
const FX_POISON_GAS := 0x113a;
var bowcraftconfigfile := ReadConfigFile("::bowcraft");
var mex;
var mey;
var woodconfigfile := ReadConfigFile(":lumberjacking:itemdesc");
var woodArray := GetConfigStringKeys(woodconfigfile);
const EVID_CHECK_SPOT := 0x123456;
const OC_PID := "#woodcore";

const NO_AUTO_MINE := 0;

program use_axe(me, axe)
  EraseObjProperty(me, "IsMeditating");
  EraseObjProperty(me, "HealTimer");
  if(!can_access(me, axe))
    return;
  endif
  if(!ReserveItem(axe))
    return;
  endif
  if(!IsToolEquipped(me, axe))
    SendSysMessage(me,"You have to equip that to lumberjack!");
    return;
  endif
  var tree := TreeNearby(me, axe);
  if(!tree)
    return;
  endif
  SendSysMessage(me, "You begin chopping...");
  var checker := 0;
  mex := me.x;
  mey := me.y;
  var mount;

  var skillValue := GetWoodTypeBySkill(AP_GetSkill( me, LUMBERJACKING));
  var woodtype := GenerateNewWoodType();
  if(woodtype > skillValue)
    woodtype:=skillValue;
  endif
  print("woodTYPE: "+woodtype);
  repeat
    mount := GetEquipmentByLayer(me, 25);
      	if(!HasToolEquipped(me,axe))
            SendSysMessage(me,"You stop lumberjack.");
            return 1;
      	endif;
    if(mount)
      SendSysMessage(me,"you cannot chop wood while on horseback.");
      return;
    endif
    if(!axe)
      return;
    endif
    PerformAction(me, UACTION_CHOP);
    PlaySoundEffect(me, SFX_SKILL_LUMBERJACK);
    sleepms(2500);
    checker := Do_Chops(me, axe, tree, woodtype);
  until(checker == 1);
endprogram

function Do_Chops(me, axe, tree, woodtype)

    /*var pid := 0;
    while(!pid)
        sleepms(50);
        pid := GetGlobalProperty(OC_PID);
    endwhile
    pid := getprocess(pid);
    if(!pid)
  	    return 1;
    endif
    var k := struct;
    k.+x := tree.x;
    k.+y := tree.y;
    k.+type := EVID_CHECK_SPOT;
    k.+source := getprocess(getpid());
    pid.sendevent(k);
    var woodtype := wait_for_event(17);*/

   // var woodtype := RandomInt(17) + 1; //count woods
   // print("woodtype: "+woodtype);
    var diff := 0;
    var objtype := 0;
    var skill := AP_GetSkill(me, LUMBERJACKING);
    var points := skill + 1;
    var name;
   // var woodArray := GetConfigStringKeys(woodconfigfile);
    //case(woodtype)
    //  1: diff :=  -1;   objtype := 0x1BDD;   name := "logs";
    //  2: diff :=  65;   objtype := 0x20001;   name := "jake";
    //  3: diff :=  70;   objtype := 0x20002;   name := "oak";
    //  4: diff :=  75;   objtype := 0x20003;   name := "karund";
    //  5: diff :=  80;   objtype := 0x20004;   name := "leshram";
    //  6: diff :=  85;   objtype := 0x20005;   name := "turmalit";
    //  7: diff :=  90;   objtype := 0x20006;   name := "emerint";
    //  8: diff :=  95;   objtype := 0x20007;   name := "legrand";
    //  9: diff :=  100;   objtype := 0x20008;   name := "solmur";
    //  10: diff :=  105;   objtype := 0x20009;   name := "kleor";
     // 11: diff :=  110;   objtype := 0x20010;   name := "lorgadum";
  //  endcase

    var elem := FindConfigElem(woodconfigfile, woodArray[woodtype]);
    var harvestAmount := GetConfigInt(elem,"HarvestAmount");

    var cfgdiff := GetConfigInt(elem,"Difficulty");
    var Desc := CStr(GetConfigString(elem,"Name"));
    diff := cfgdiff;

    objtype := woodArray[woodtype];
    name := Trim(Desc,TRIM_BOTH);
    if(woodtype > 1)
        name:=name+" logs";
    endif;



  var difficulty := GetHarvestDifficulty("wood", tree.x, tree.y, tree.objtype);

  if(difficulty == error)
    SendSysMessage(me, "There's not enough wood here to chop");
    return 1;
  endif
  if((me.x != mex) || (me.y != mey))
    SendSysMessage(me,"You stop chopping.");
    return 1;
  endif



  if(difficulty == error)
    SendSysMessage(me,"there is no more ore here to LAMBA.");
    return 1;
  endif


  if(difficulty != -1)
    var rint := RandomInt(5) + 1;
    if((CInt(skill) >= CInt(diff)) && (rint <= 3))
      difficulty := diff;
    else
        var defaultElem := FindConfigElem(woodconfigfile, UOBJ_LOG);
        harvestAmount := GetConfigInt(defaultElem,"HarvestAmount");
      woodtype := 1;
      objtype := UOBJ_LOG;
          name := CStr(GetConfigString(defaultElem,"Name"));
          //name := "logs";
    endif
  endif

  var wood_amount := HarvestResource( "wood", tree.x, tree.y, 1, 10 );
  if(SkillCheck(me, LUMBERJACKING, difficulty, points))

    if(wood_amount == 0)
      SendSysMessage(me, "There's not enough wood here to chop.");
      return 1;
    endif
    //print(name);
    //print(objtype);
    if(!CreateItemInBackpack(me, objtype, harvestAmount)) //wood_amount //0x1bdd
      SendSysMessage(me, "Your backpack is too full.");
      return 1;
    else
      SendSysMessage(me, "You put some "+name+" in your backpack");
      CheckToolWear (me, axe, LUMBERJACKING);
      return 0;
    endif
  else
    SendSysMessage(me, "You fail to get any usable wood.");
    return 0;
  endif
endfunction

function TreeNearby(me, axe)
  SendSysMessage( me, "Select something to chop." );
  var tree := TargetCoordinates( me );
  if(!tree)
    SendSysMessage(me, "Cancelled");
    return 0;
  endif
  var distt := coordist( me.x, me.y, tree.x, tree.y );
  if(distt > 1 )
    if(!tree.item.container)
      SendSysMessage(me,"That is too far away");
      return 0;
    endif
  endif
  if(is_furniture(tree.item.objtype, tree.item))
    chopfurniture(me, tree.item);
    return 0;
  elseif(is_tree(tree.objtype))
    var difficulty := GetHarvestDifficulty( "wood", tree.x, tree.y, tree.objtype );
    if(difficulty == error)
      SendSysMessage(me, "There's not enough wood here to chop.");
      return 0;
    endif
    return tree;
  else
    use_blade(me, axe, tree.item);
    return 0;
  endif
endfunction

function is_furniture(theobj, thing)
  var miscobjtypes := { 0x17007, 0xA30, 0xA34, 0xA38, 0xFAE, 0x19E40};
  if((theobj >= 0x9a8) && (theobj <= 0x9ab))
    return 1;
  elseif((theobj >= 0xa2a) && (theobj <= 0xa2c))
    return 1;
  elseif((theobj >= 0xa4c) && (theobj <= 0xa53))
    return 1;
  elseif((theobj >= 0xa97) && (theobj <= 0xa9e))
    return 1;
  elseif((theobj >= 0xb2c) && (theobj <= 0xb40))
    return 1;
  elseif((theobj >= 0xb49) && (theobj <= 0xb90))
    return 1;
  elseif((theobj >= 0xe3c) && (theobj <= 0xe43))
    return 1;
  elseif((theobj >= 0xe7c) && (theobj <= 0xe80))
    return 1;
  elseif((theobj >= 0xf65) && (theobj <= 0xf77))
    return 1;
  elseif(theobj in miscobjtypes)
    return 1;
  elseif(GetObjProperty(thing, "ItemsCreatedSerials"))
    return 1;
  else
    return 0;
  endif
endfunction

function is_tree(theobj)
  if((theobj >= 0x0c99) && (theobj <= 0x0cea))
    return 1;
  elseif((theobj >= 0x0cf3) && (theobj <= 0x0d03))
    return 1;
  elseif((theobj >= 0x0d41) && (theobj <= 0x0dab))
    return 1;
  elseif((theobj >= 0x12b6) && (theobj <= 0x12c7))
    return 1;
  elseif((theobj >= 0x0d37) && (theobj <= 0x0d38))
    return 1;
  elseif((theobj == 0x0c9e) || (theobj == 0x0ca8) || (theobj == 0x0caa) || (theobj == 0x0cab))
    return 1;
  else
    return 0;
  endif
endfunction



function chopfurniture(me, theobj)
  if(!can_access(me, theobj))
    return;
  endif
  var sign;
  if(GetObjProperty(theobj, "lockeddown") || GetObjProperty(theobj, "secure"))
    SendSysMessage(me, "You cannot destroy secure or locked down items.");
    return;
  endif
  if(theobj.objtype == 0x17007)
    var houseserial := GetObjProperty(theobj, "houseserial");
    sign := SystemFindObjectBySerial(houseserial);
    if(GetObjProperty(sign, "barrelserial") == theobj.serial)
      EraseObjProperty(sign, "barrelserial");
      SendSysMessage(me, "you cannot destroy that while it is locked down.");
      return;
    endif
  endif
  if(!Accessible(me, theobj))
    SendSysMessage(me, "you cant reach that");
    return;
  endif
  if(me.multi)
    if(GetObjProperty((me.multi), "ownerserial") != me.serial)
      var house := me.multi;
      foreach thing in (house.components)
        if((thing.objtype == 0x0bd0) || (thing.objtype == 0x0bd2))
          sign := thing;
          break;
        endif
      endforeach
      var coowner := 0;
      var coownerlist := GetObjProperty(sign, "coownerlist");
      foreach thing in coownerlist
        if(thing == me.serial)
          coowner := 1;
          break;
        endif
      endforeach
      if(!coowner)
        SendSysMessage(me, "this does not belong to you!");
        return;
      endif
    endif
  endif
  foreach thing in EnumerateItemsInContainer(theobj)
    if(theobj.container)
      MoveItemToContainer(thing, theobj.container);
    else
      MoveObjectToLocation(thing, theobj.x, theobj.y, theobj.z, theobj.realm, MOVEOBJECT_FORCELOCATION);
    endif
  endforeach
  if(theobj.usescript == ":tinkering:tinkerTraps")
    var traptype := GetObjProperty(theobj,"trap_type");
    var trapstrength := GetObjProperty(theobj,"trap_strength");
    var trapperserial := CInt(GetObjProperty(theobj, "trapper"));
    var trapper := SystemFindObjectBySerial(trapperserial, SYSFIND_SEARCH_OFFLINE_MOBILES);
    if(trapper)
      SetObjProperty(me, "LastHit", {trapper.name, trapper.serial, "trapped chest" });
      SetScriptController(trapper);
    endif
    case (traptype)
      "1" :   PlaySoundEffect(me, SFX_224);
              var dmg := (RandomInt(20) + CInt(trapstrength));
              SendSysMessage(me, "You set off a needle trap!");
              ApplyDamageEX(me, dmg, DMG_PHYSICAL);
              theobj.usescript := "";
              EraseObjProperty( theobj, "trap_type" );
              EraseObjProperty( theobj, "trap_strength" );

      "2" :   start_script(":traps:poisonTrapTriggered", {me, theobj, "You set off a poison trap!", trapstrength});

      "3" :   PlaySoundEffect(me, SFX_208);
              SendSysMessage(me, "You set off an explosion trap!");
              PlayObjectCenteredEffect( me, FX_EXPLODE_3, 10,10);
              var dmg := (RandomInt(20) + CInt(trapstrength));
              ApplyDamageEX(me, dmg, DMG_PHYSICAL);
              theobj.usescript := "";
              EraseObjProperty( theobj, "trap_type" );
              EraseObjProperty( theobj, "trap_strength" );
    endcase
  endif
  var created := GetObjProperty(theobj, "ItemsCreatedSerials");
  if(created)
    var holder;
    foreach thing in created
      holder := SystemFindObjectBySerial(thing);
      if(holder)
        DestroyItem(holder);
      endif
    endforeach
  else
    DestroyItem(theobj);
  endif
  PlaySoundEffect(me, 0x13a);
  return;
endfunction


function use_blade(who, blade, use_on)
    if(!can_access(who,use_on))
        return;
    endif
    if(!ReserveItem(use_on))
        return;
    endif
    var checkme := use_on.objtype;

    var is_log := 0;
    case(checkme)
      0x20001:  is_log := 1;
  	  0x20002:  is_log := 1;
      0x20003:  is_log := 1;
      0x20004:  is_log := 1;
      0x20005:  is_log := 1;
      0x20006:  is_log := 1;
      0x20007:  is_log := 1;
      0x20008:  is_log := 1;
      0x20009:  is_log := 1;
      0x20010:  is_log := 1;
      0x20011:  is_log := 1;
      0x20012:  is_log := 1;
      0x20013:  is_log := 1;
      0x20014:  is_log := 1;
      0x20015:  is_log := 1;
      0x20016:  is_log := 1;
    endcase

    var elem := FindConfigElem(woodconfigfile, checkme);
    if(!elem)
        SendSysMessage(who, elem.errortext);
    endif
    var cfgdiff := GetConfigInt(elem,"Difficulty");
    if(!cfgdiff)
        SendSysMessage(who, cfgdiff.errortext);
    endif


    if((checkme == UOBJ_LOG) || (checkme == 0x1bd7) || is_log)
        //if(AP_GetSkill( who, BOWCRAFT) < cfgdiff)
        //    //SendSysMessageUC(who, "Не достаточно навыка", "RUS", 3, 0x25);
        //    SendSysMessage(who, "You have no chance to successfully work with that logs.");
        //    return;
        //endif
        CarveLogs(who, blade, use_on);
    elseif(use_on.npctemplate == "sheep")
        process_wool(who, blade, use_on);
    elseif(use_on.objtype == UOBJ_CORPSE)
        ReleaseItem(blade);
        Carve_Corpse(who, use_on);
    elseif(is_fish(checkme))
        CarveFish(who, blade, use_on);
    else
        SendSysMessage(who, "I don't know how to use those items together.");
    endif
endfunction


function process_wool(who, blade, sheep)
  if(sheep.graphic == 207)
    sheep.graphic := 223;
    CreateItemInContainer(who.backpack, 0x1f125, 3);
    CheckToolWear (who, blade, TAILORING);
  else
    SendSysMessage(who,"That sheep is not yet ready to be shorn.");
  endif
endfunction

function is_fish(theobj)
  if((theobj >= UOBJ_FISH_START) && (theobj <= UOBJ_FISH_END) )
    return 1;
  elseif ((theobj >= UOBJ_SFISH_START) && (theobj <= UOBJ_SFISH_END))
    return 1;
  else
    return 0;
  endif
endfunction

function CarveFish(who, blade, use_on)
  if((!ReserveItem(use_on)) || (use_on.movable == 0))
    SendSysMessage(who, "You cannot use that.");
    return;
  endif
  var num_steaks := (4 * use_on.amount);
  PlaySoundEffect(who, SFX_57);
  if(DestroyItem(use_on))
    CreateItemInBackpack(who, UOBJ_FISHSTEAK, num_steaks);
    CheckToolWear (who, blade, FISHING);
    SendSysMessage(who, "You carve the fish steaks and put them in your backpack");
  endif
  sleep(1);
endfunction

function Carve_Corpse(who, cadaver)
  Detach();
  if((!Accessible(who, cadaver)) or (!CheckLineOfSight(who, cadaver)))
    SendSysMessage(who, "You cannot use that");
    return;
  endif
  if(Distance(who, cadaver) > 2)
    SendSysMessage(who, "You are not close enough");
    return;
  endif

  var c_type := cadaver.corpsetype;
  if(GetObjProperty(cadaver, "cut") == "1")
    SendSysMessage( who, "You cannot get any more from this corpse." );
    foreach thing in EnumerateItemsInContainer(cadaver)
      MoveObjectToLocation(thing, cadaver.x, cadaver.y, cadaver.z, cadaver.realm, MOVEOBJECT_FORCELOCATION);
    endforeach
    DestroyItem(cadaver);
  elseif((c_type == 400) || (c_type == 401))
    var beardlist := {0x203e, 0x203f, 0x2040, 0x2041, 0x204b, 0x204c, 0x204d };
    var hairlist  := {0x2044, 0x2045, 0x2046, 0x2047, 0x2048, 0x2049, 0x204a, 0x203b, 0x203c, 0x203d };
    foreach thing in EnumerateItemsInContainer(cadaver)
      if((thing.objtype in hairlist) or (thing.objtype in beardlist))
        DestroyItem(thing);
      else
        MoveObjectToLocation(thing, cadaver.x, cadaver.y, cadaver.z, cadaver.realm, MOVEOBJECT_FORCELOCATION);
      endif
    endforeach
    var partsarray := {};
    var part;
    part := CreateItemAtLocation(cadaver.x-1, cadaver.y, cadaver.z, 0x1da0, 1);
    partsarray.append(part);
    SetObjProperty(part, "serial", GetObjProperty(cadaver, "serial"));
    var aname := cadaver.name;
    aname["A corpse of"] := "";
    part.name := "The head of " + aname;
    part := CreateItemAtLocation(cadaver.x-1, cadaver.y, cadaver.z, 0x1da1, 1);
    partsarray.append(part);
    part := CreateItemAtLocation(cadaver.x-1, cadaver.y+1, cadaver.z, 0x1da2, 1);
    partsarray.append(part);
    part := CreateItemAtLocation(cadaver.x+1, cadaver.y, cadaver.z, 0x1da3, 1);
    partsarray.append(part);
    part := CreateItemAtLocation(cadaver.x+1, cadaver.y+1, cadaver.z, 0x1da4, 1);
    partsarray.append(part);
    part := CreateItemAtLocation(cadaver.x, cadaver.y, cadaver.z, 0x1d9f, 1);
    partsarray.append(part);
    var blood := CreateItemAtLocation(cadaver.x, cadaver.y, cadaver.z, 0x122a, 1);
    blood.movable := 0;
    DestroyItem(cadaver);
    sleep(40);
    foreach thing in partsarray
      if(!thing.container)
        DestroyItem(thing);
      endif
    endforeach
    sleep(20);
    DestroyItem(blood);
  else
    if(c_type == 223)
      CreateItemInContainer(cadaver, 0x9f1, 2);
      SendSysMessage(who, "You place the items on the corpse.");
      var theblood := CreateItemAtLocation(cadaver.x, cadaver.y, cadaver.z, UOBJ_BLOOD, 1);
      sleep(30);
      DestroyItem(cadaver);
      sleep(30);
      DestroyItem(theblood);
      return;
    endif
    var conf := ReadConfigFile(":*:npcdesc");
    var tmplate := GetObjProperty(cadaver, "npctemplate");
    if(!tmplate)
      SendSysMessage(who, "You cut the corpse, but fail to find anything useful.", 3, 40);
      var theblood := CreateItemAtLocation(cadaver.x, cadaver.y, cadaver.z, UOBJ_BLOOD, 1);
      sleep(30);
      DestroyItem(cadaver);
      sleep(30);
      DestroyItem(theblood);
      return;
    else
      SetObjProperty(cadaver, "cut","1");
      var corpseitm := conf[tmplate]."corpseitm";
      var corpseamt := conf[tmplate]."corpseamt";
      print("I: " + corpseitm);
      print("A: " + corpseamt);
      if(!corpseitm)
        print("error");
        var theblood := CreateItemAtLocation(cadaver.x, cadaver.y, cadaver.z, UOBJ_BLOOD, 1);
        sleep(30);
        DestroyItem(cadaver);
        sleep(30);
        DestroyItem(theblood);
        return;
      endif
      var i := 1;
      corpseitm := SplitWords(corpseitm);
      corpseamt := SplitWords(corpseamt);
      foreach thing in corpseitm
        CreateItemInContainer(cadaver, thing, Cint(corpseamt[i]));
        i := i + 1;
      endforeach
      SendSysMessage(who, "You place the items on the corpse.");
      var theblood := CreateItemAtLocation(cadaver.x, cadaver.y, cadaver.z, UOBJ_BLOOD, 1);
      sleep(30);
      DestroyItem(cadaver);
      sleep(30);
      DestroyItem(theblood);
    endif
  endif
endfunction

function CarveLogs(who, blade, logs)
  if(logs.movable == 0)
    SendSysMessage(who, "You cannot use those logs.");
    return;
  endif
  if(!Accessible(who, logs))
    SendSysMessage(who, "You cannot use that");
    return;
  endif
  if(!logs.container)
    if(Distance(who, logs) > 2)
      SendSysMessage(who, "That is too far away");
      return;
    endif
  endif
  var selection := SelectMenuItem2(who, "BowcraftCarving");
  if(!selection)
    return;
  endif
  var what := selection.objtype;
  if(!Accessible(who, logs))
    SendSysMessage(who, "I can't access the logs to make that.");
    return;
  endif
  var objectconfig := FindConfigElem(bowcraftconfigfile, what);
  if(!objectconfig)
    return;
  endif
  var material := CInt(GetConfigString(objectconfig, "Material"));
  if(material > logs.amount)
    SendSysMessage(who, "You don't have enough logs to make that.");
    return;
  endif
  var difficulty := GetConfigInt(objectconfig, "Difficulty");
  var pointvalue := GetConfigInt(objectconfig, "PointValue");
  //var ExcepChance := GetConfigInt(objectconfig, "ExcepChance");
  //if(!ExcepChance)
  //  ExcepChance:=10;
  //endif;
  var ExcepChance:=10;
  var bow := 0;
  Detach();
  PlaySoundEffect(who, 0x5a);
  PerformAction(who, 0x021);
  sleep(2);
  PlaySoundEffect(who, 0x5a);
  PerformAction(who, 0x021);
  sleep(2);
  PlaySoundEffect(who, 0x5a);
  PerformAction(who, 0x021);
  sleep(2);
  PlaySoundEffect(who, 0x5a);
  PerformAction(who, 0x021);
  sleep(2);


    var dmg_mod:=0;


    var itemName := woodconfigfile[logs.objtype].name;
    var itemColor := woodconfigfile[logs.objtype].color;
    case(logs.objtype)
        0x20001:  dmg_mod:=1;
        0x20002:  dmg_mod:=2;
        0x20003:  dmg_mod:=3;
        0x20004:  dmg_mod:=4;
        0x20005:  dmg_mod:=5;
        0x20006:  dmg_mod:=6;
        0x20007:  dmg_mod:=7;
        0x20008:  dmg_mod:=8;
        0x20009:  dmg_mod:=9;
        0x20010:  dmg_mod:=10;
        0x20011:  dmg_mod:=11;
        0x20012:  dmg_mod:=12;
        0x20013:  dmg_mod:=13;
        0x20014:  dmg_mod:=14;
        0x20015:  dmg_mod:=14;
        0x20016:  dmg_mod:=14;
    endcase


    var fullName:="";
  if(SkillCheck(who, BOWCRAFT, difficulty, pointvalue))
    if(what == UOBJ_SHAFTS)
      var amt := logs.amount;
      if(DestroyItem(logs))
        CreateItemInBackpack(who, what, amt);
        CheckToolWear (who, blade, BOWCRAFT);
        SendSysMessage(who, "You create some shafts and place them in your pack." );
      endif
    elseif (what == UOBJ_BOW)
      if(SubtractAmount(logs, material))
        fullName := itemName+ " bow";
        bow := CreateItemInBackpack(who, what);
        bow.color := itemColor;
        bow.name := "a "+fullName;
        CheckToolWear (who, blade, BOWCRAFT);

        SendSysMessage(who, "You create a bow and place it in your pack.");
      endif
    elseif (what == UOBJ_XBOW)
      if(SubtractAmount(logs, material))
        bow := CreateItemInBackpack(who, what);
        bow.color := 11;
        CheckToolWear (who, blade, BOWCRAFT);
        SendSysMessage(who, "You create a crossbow and place it in your pack.");
        SetName(bow, "a crossbow");
      endif
    elseif (what == UOBJ_HEAVY_XBOW)
      if(SubtractAmount(logs, material))
        bow := CreateItemInBackpack(who, what);
        CheckToolWear (who, blade, BOWCRAFT);
        SendSysMessage(who, "You create a heavy crossbow and place it in your pack.");
        SetName(bow, "a heavy crossbow");
      endif
    else
      SendSysMessage(who, "I don't know how to make that.");
      return;
    endif
    var myskill := CInt(AP_GetSkill(who, BOWCRAFT));
    var modpts := 0;
    if(myskill >=  difficulty)
      modpts := (myskill - difficulty);
    endif
    var rint := RandomInt(100);
    //change exp.
    if(rint <= ExcepChance)
      ExceptionalFameMod(who, myskill, difficulty, Cint(pointvalue / 2));
     // setquality(who, bow);

        if(myskill >= 99)
            bow.name := "an exceptional " + fullName + " [crafted by " + who.name + "]";
        else
            bow.name := "an exceptional " + fullName;
        endif
        bow.quality := bow.quality + 0.2;
        bow.hp := bow.maxhp;
        bow.dmg_mod := dmg_mod;
        bow.speed_mod:=100;
        SendSysMessage(who, "You created an exceptional "+lower(fullName)+".");

    endif
  else
    SubtractAmount(logs, (RandomInt(5) + 1));
    SendSysMessage(who, "You destroy some logs.");
  endif
endfunction



function IsToolEquipped(me,tool)
  if((!Accessible(me,tool)) || (Distance(me, tool) > 1))
    return 0;
  endif
  foreach item in ListEquippedItems(me)
    if (tool.serial == item.serial )
      return 1;
    endif
  endforeach
  return EquipItem(me, tool );
endfunction


function HasToolEquipped(me,tool)
  if((!Accessible(me,tool)) || (Distance(me, tool) > 1))
    return 0;
  endif
  foreach item in ListEquippedItems(me)
    if (tool.serial == item.serial )
      return 1;
    endif
  endforeach
endfunction
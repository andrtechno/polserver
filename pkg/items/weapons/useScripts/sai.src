use uo;
use os;
use polsys;

//include "include/client";
//include ":attributes:attributes";
//include "include/string";
//include "include/objtype";
include "include/canAccess";
include ":equipment:equip";
//include ":itemutils:itemUtil";
//include "include/math";
include ":combat:combat";
include ":damage:damage";
include ":combat:hitScripts";

program use_item(who, item)
    var backstage := 0;
    if( item.IsA( POLCLASS_WEAPON ) )
        if( item == GetEquipmentByLayer( who, item.tile_layer ) )
            var defender := target(who);
            if(!defender)
                SendSysMessage(who, "Canceled.");
                return 0;
            endif
            //if(!defender.isa(POLCLASS_MOBILE))
            //    return 0;
            //endif
            if(!AP_GetVital(defender, VITALID_LIFE))
                SendSysMessage(who, "You can only use that on living things.");
                return 0;
            endif
            if(defender.dead)
                SendSysMessage(who, "You cant cast that on ghosts.");
                return 0;
            endif
            if(Distance( who, defender ) > 10);
                SendSysMessage(who, "distance of long");
                return 0;
            endif
            if(!ConsumeSubstance( who.backpack, 0x0eed, 1 ));
                SendSysMessage(who, "net potronov.");
                return 0;
            endif


	        PerformAction( who , 0x09 );
            sleepms(400);
            SendSysMessage(who, "----------");
            PlayMovingEffect(who, defender, 0x0E97, 12, 10, 0);
            //SendSysMessage(who, "facing "+defender.facing);
            //SendSysMessage(who, "me facing "+who.facing);


            //SendSysMessage(who, "xy defender "+defender.x+" "+defender.y);
            //SendSysMessage(who, "xy me "+who.x+" "+who.y);


            var fac := GetFacing(defender.x, defender.y, who.x, who.y);
            var dista := CoordinateDistance(defender.x, who.y, who.x, defender.y);
            if(defender.facing == 1 && fac == 5 && dista < 3)
                backstage := 1;
            elseif(defender.facing == 2 && fac == 6 && dista < 3)
                backstage := 1;
            elseif(defender.facing == 3 && fac == 7 && dista < 3)
                backstage := 1;
            elseif(defender.facing == 4 && fac == 0 && dista < 3)
                backstage := 1;
            elseif(defender.facing == 5 && fac == 1 && dista < 3)
                backstage := 1;
            elseif(defender.facing == 6 && fac == 2 && dista < 3)
                backstage := 1;
            elseif(defender.facing == 7 && fac == 3 && dista < 3)
                backstage := 1;
            elseif(defender.facing == 0 && fac == 4 && dista < 3)
                backstage := 1;
            endif

            var itemInfo := GetItemDescriptor(item.objtype);
            print(itemInfo.Damage);

            SkillCheck(who, itemInfo.Attribute, -1, "", 0x1);
            SkillCheck(who, TACTICS, -1, "", 0x1);

            var damage := RandomDiceRoll(itemInfo.Damage);
            if(backstage)
                damage := damage * 2;
                SendSysMessage(who, "Backstab", 3, 67);
                PrintTextAbovePrivate(who, "Backstab", who,3,67);
            endif

	PlayHitSounds(defender);
	//SkillChecks(attacker, defender, weapon, damage);
	//ParryCheck(who, defender, damage);

            WeaponHitScripts(who, defender, item, 0, damage, damage);

            ApplyRawDamageEX(defender, damage, DMG_PHYSICAL, who); //DMG_PHYSICAL
			SetLastDamageInfo(who, damage, "Sai", defender);

            //SendSysMessage(who, "dista "+dista);
        endif
    endif



    EraseObjProperty(who, "IsMeditating");
    EraseObjProperty(who, "HealTimer");
    if(!can_access(who, item))
        return;
    endif

    if( item.IsA( POLCLASS_WEAPON ) )
        EquipWeapon( who, item );
    endif

endprogram

function WeaponHitScripts(attacker, defender, weapon, armor, basedamage, rawdamage)
	var weapon_scripts := array;
	if ( weapon.intrinsic ) // Intrinsic fist
		weapon_scripts := GetWeaponHitScripts(attacker);
	elseif ( weapon.IsA(POLCLASS_WEAPON) )
		weapon_scripts := GetWeaponHitScripts(weapon);
	endif

	foreach hitscript in ( weapon_scripts )
		var script := Start_Script(hitscript, array{attacker, defender, weapon, 0, basedamage, rawdamage});
		if ( !script || script.errortext )
			SendSysMessage(attacker, "*Attacker* Weapon script error starting ["+hitscript+"] :"+script.errortext);
		endif
		SleepMS(2);
	endforeach

	return 1;
endfunction

function PlayHitSounds(defender)
	if ( defender.IsA(POLCLASS_NPC) )
		var damaged_sound := NPC_GetNPCConfig(defender).DamagedSound;
		if ( damaged_sound )
			PlaySoundEffect(defender, damaged_sound);
		endif
	endif
endfunction

use uo;
use os;
use basic;

//include "include/spelldata";
//include "include/attributes";
//include "include/npcbackpacks";
include "include/client";
include ":damage:damage";
include ":guards:areas";
include ":codexdamnorum:spelldata";
include ":magery:spells";


const SPELL_EFFECT_ID		:= 0;
const SPELL_EFFECT_SPEED	:= 0;
const SPELL_EFFECT_LOOP		:= 0;

program cast_animate_dead( parms )

	var caster := parms[1];
	var info := parms[2];
	var circle := info.circle;
	var cast_on;
	var fromhit;

	if (parms[1] == "#MOB")
		caster := parms[2];
		cast_on := parms[3];
		if (parms[4])
			circle := parms[4];
		endif
		if (parms[5])
			fromhit := parms[5];
		endif

	else
		caster := parms;
		/*if( TryToCast( caster, SPELLID_ANIMATE_DEAD ) != SUCCESS )
				EraseObjProperty( caster, "#Casting" );

			return;
		endif*/

		if(IsInArea(caster, AREAID_TRINSIC) || IsInArea(caster, AREAID_CRAFTMINE))
	  SendSysMessage(caster, "You cannot cast this kind of spell here.");
	EraseObjProperty( caster, "#Casting" );    
	return 0;
	endif
	
	
		SendSysMessage(caster, "What corpse do you wish to animate?");
        cast_on := MS_Target(caster, info.targ, "What corpse do you wish to animate?", TGTOPT_CHECK_LOS);

	endif
		
        if (!cast_on) // If no cast_on then get cast_on from parms[4]. Used mostly for NPC casting.
            cast_on := parms[4];
        endif
	
	if( !fromhit )
		EraseObjProperty( caster, "#Casting" );
		//cast_on := Reflected( caster, cast_on, circle );
		//cast_on := Reflected( cast_on );
						    if(Reflected(cast_on, caster, struct{}))
                                cast_on := caster;
                            endif
	endif

	if( cast_on.objtype != 0x2006 )
		SendSysMessage(caster, "That is not a corpse!");
		EraseObjProperty( caster, "#Casting" );
		return;
	endif
	
	if( !GetObjProperty(cast_on, "npctemplate") )
		SendSysMessage(caster, "You can't animate an human soul.");
		EraseObjProperty( caster, "#Casting" );
		return;
	endif

	/*var immunity := IsProtected( caster, cast_on, circle );
	if( immunity == IMMUNED )
		EraseObjProperty( caster, "#Casting" );
		return;
	endif*/

	var npctemplate := GetObjProperty( cast_on, "npctemplate" );
	var magery := GetEffectiveSkill( caster, SKILLID_MAGERY );
	var duration := ModifyWithMagicEfficiency( caster, magery * 3 );
	var power := ModifyWithMagicEfficiency( caster, magery - 20 );

	if( !power )
		return;
	endif

	if( power > 95 )
		power := 95;
	endif

	var prevpower := GetObjProperty( cast_on, "animated" );
	if ( prevpower )
		power := CInt( power * prevpower / 100 );
	endif

	//var protection := GetResultingPlaneProtection( cast_on, plane );
	var protection := 10;
	//if( protection )
		var modifier := 100 - (protection * 20);
		if( modifier < 1 )
			modifier := 0;
		endif
		
		duration := CInt( duration * modifier / 100 );
		power := CInt( duration * modifier / 100 );
	
		if( !duration || !power )
			PrintTextAbovePrivate( cast_on, "The nature of the target prevent it from being animated!", caster );
			EraseObjProperty( caster, "#Casting" );
			return;
		endif
	//endif

	if ( power < 1 )
		PrintTextAbovePrivate( cast_on, "There's not enough life essence left in this corpse to animate it!", caster );
		EraseObjProperty( caster, "#Casting" );
		return;
	endif

	var thecritter;
	thecritter := CreateNpcFromTemplate( npctemplate, cast_on.x, cast_on.y, cast_on.z );

	SetObjProperty( thecritter, "master", caster.serial );
	SetObjProperty( thecritter, "script", thecritter.script );
	SetObjProperty( thecritter, "noloot", 1 );
	SetObjProperty( thecritter, "animated", power );
	SetObjProperty( thecritter, "Type", "Undead" );

	var truename := ExtractName( cast_on.desc );
	thecritter.name   := "a Reanimated " + truename;
	thecritter.color  := 0x482;

	if ( !thecritter.backpack )
		var newbackpack := CreateItemAtLocation(thecritter.x, thecritter.y, thecritter.z, 0xe75, 1 );
		EquipItem( thecritter, newbackpack );
	endif

	foreach item in EnumerateItemsInContainer( cast_on )
		MoveItemToContainer( item, thecritter.backpack );
	endforeach

	DestroyItem( cast_on );

	thecritter.setmaster( caster );
	thecritter.script := "tamed";
	RestartScript( thecritter );

    PlaySoundEffect( caster, 0x482 );
	PlayObjectCenteredEffect(thecritter, SPELL_EFFECT_ID, SPELL_EFFECT_SPEED, SPELL_EFFECT_LOOP);


	SetStrengthMod(thecritter, 0);
	SetIntelligenceMod(thecritter, 0);
	SetDexterityMod(thecritter, 0);

	SetBaseStrength(thecritter, CInt(GetStrength(thecritter) * power / 100) );
	SetBaseIntelligence(thecritter, CInt(GetIntelligence(thecritter) * power / 100) );
	SetBaseDexterity(thecritter, CInt(GetDexterity(thecritter) * power / 100) );

	SetHp(thecritter, GetMaxHp(thecritter));
	SetMana(thecritter, GetMaxMana(thecritter));
	SetStamina(thecritter, GetMaxStamina(thecritter));

	for i := 0 to 48
		var initskill := GetEffectiveSkill( thecritter, i );
		if( initskill )
			SetBaseSkill( thecritter, i, initskill * power / 100 );
		endif
	endfor

	EraseObjProperty( caster, "#Casting" );
	sleep( duration );

	PrintTextAbovePrivate( thecritter, "The spell effect wear off", caster );
	thecritter.name := truename;
	ApplyRawDamage( thecritter, GetMaxHp(thecritter) + 3 );

endprogram
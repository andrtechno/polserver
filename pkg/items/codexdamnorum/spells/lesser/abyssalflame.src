use uo;
use os;

include ":charclasses:classes";
include "include/client";
include ":damage:damage";
include ":magery:spells";
include ":guards:areas";
include ":codexdamnorum:spelldata";
include ":magery:spellAttack";

const SPELL_EFFECT_ID		:= 0;
const SPELL_EFFECT_SPEED	:= 0;
const SPELL_EFFECT_LOOP		:= 0;


program abyssalflame( parms )

	//var circle := GetCircle( SPELLID_ABYSSAL_FLAME );
print("abyssalflame");
	var caster := parms[1];
	var info := parms[2];
	var circle := info.circle;
	var cast_on;
	var fromhit;

	if (parms[1] == "#MOB")
		caster := parms[2];
		cast_on := parms[3];
		if (parms[4])
			circle := parms[4];
		endif
		if (parms[5])
			fromhit := parms[5];
		endif

	else

		/*if( TryToCast( caster, 70 ) != SUCCESS )
			EraseObjProperty( caster, "#Casting" );
			return;
		endif*/
		
    if(IsInArea(caster, AREAID_TRINSIC) || IsInArea(caster, AREAID_CRAFTMINE))
        SendSysMessage(caster, "You cannot cast this kind of spell here.");
        EraseObjProperty( caster, "#Casting" );
	    return 0;
	endif
		

		SendSysMessage( caster, "Select a target." );
		//cast_on := CanTargetSpell( caster, circle, TGTOPT_CHECK_LOS + TGTOPT_HARMFUL );
		cast_on := Target( caster);
		if( !cast_on )
			EraseObjProperty( caster, "#Casting" );
			return;
		endif
	endif

	PlaySoundEffect( caster, 0x0160 );

	if( !fromhit )
		//EraseObjProperty( caster, "#Casting" );
		//cast_on := Reflected( caster, cast_on, circle );
		//cast_on := Reflected( cast_on);

				    if(Reflected(cast_on, caster, struct{}))
                        cast_on := caster;
                    endif
	else
		PlayMovingEffect(caster, cast_on, SPELL_EFFECT_ID, SPELL_EFFECT_SPEED, SPELL_EFFECT_LOOP, 0);
	endif

	PlaySoundEffect( caster, 0x0160 );

	var protected := IsProtected( caster, cast_on, circle );
	if( protected != IMMUNED )
		if( protected == CURSED )
			ApplySpellDamageEX(cast_on, CalcSpellDamage( caster, cast_on, CInt(circle / 2) ), DMG_FIRE, caster, "AbyssalFlame");
			//ApplyElementDamagealDamage( caster, cast_on, DMG_FIRE, CalcSpellDamage( caster, cast_on, circle ), element );
		else
			ApplySpellDamageEX(cast_on, CalcSpellDamage( caster, cast_on, CInt(circle / 2) ), DMG_FIRE, caster, "AbyssalFlame");
			//ApplyElementalDamage( caster, cast_on, DMG_FIRE, CalcSpellDamage( caster, cast_on, CInt(circle / 2) ), element );
		endif
	endif

	var dmg;
	var range := ModifyWithMagicEfficiency( caster, CInt( GetEffectiveSkill( caster, SKILLID_MAGERY ) / 35 ) );
	if( !range )
		return;
	endif

	var victims := ListMobilesNearLocation( CInt(cast_on.x), CInt(cast_on.y), CInt(cast_on.z), range );
	//EraseObjProperty( caster, "#Casting" );
	sleepms( 500 );

	foreach mobile in victims

		if( CheckLosAt( mobile, CInt(cast_on.x), CInt(cast_on.y), CInt(cast_on.z) ) && mobile.dead == 0 )
			var immunity := IsProtected( caster, mobile, circle );
			var circ := circle;
			if( immunity != IMMUNED )
				if( immunity == CURSED )
					circ := circ * 2;
				endif
		
				//dmg := CalcSpellDamage( caster, mobile, CInt(circ / 2), AREA_EFFECT_SPELL );
				dmg := CalcSpellDamage(10, caster, mobile);
				send_attack( mobile, caster, info.spell_id );
				PlaySoundEffect( mobile, SFX_SPELL_EXPLOSION );
				PlayStationaryEffect( CInt(mobile.x),CInt(mobile.y),CInt(mobile.z), 0x36b0, 7, 0x10 );
				//ApplyplanarDamage( caster, mobile, circ, dmg, plane );
				ApplySpellDamageEX(cast_on, dmg, DMG_FIRE, caster, circle, "AbyssalFlame");
			endif
		endif

	endforeach

endprogram
use uo;
use os;

//include "include/random";
//include "include/attributes";
//include "include/spelldata";
//include "include/damages";
include ":charclasses:classes";
include "include/client";
include "include/math";
include ":attributes:attributes";
include ":guards:areas";
include ":magery:spells";

include ":codexdamnorum:spelldata";


const SPELL_EFFECT_ID		:= FX_SPELL_KILL;
const SPELL_EFFECT_SPEED	:= SPEED_SPELL_KILL;
const SPELL_EFFECT_LOOP		:= LOOP_SPELL_KILL;


program cast_kill( parms )

	//var circle := GetCircle( SPELLID_KILL );

	var plane := 0x10;
	var caster := parms[1];
	var info := parms[2];
    var circle := info.circle;
	var cast_on;
	var fromhit;

	if (parms[1] == "#MOB")
		caster := parms[2];
		cast_on := parms[3];
		if (parms[4])
			circle := parms[4];
		endif
		if (parms[5])
			fromhit := parms[5];
		endif

	else

		//var result := TryToCast( caster, SPELLID_KILL );
		//if( result != SUCCESS )
			//if( result == NO_SKILL )
				//BurnSelf( caster, circle );
				//PlayObjectCenteredEffect( caster, FX_SPELL_KILL, SPEED_SPELL_KILL, LOOP_SPELL_KILL );
				//PlaySoundEffect( caster, SFX_SPELL_KILL);
			//endif
		
			//EraseObjProperty( caster, "#Casting" );
			//return;
		//endif

		if(IsInArea(caster, AREAID_TRINSIC) || IsInArea(caster, AREAID_CRAFTMINE))
            SendSysMessage(caster, "You cannot cast this kind of spell here.");
	        return 0;
	    endif
	
        cast_on := MS_Target(caster, info.targ, "Select a victim.", TGTOPT_CHECK_LOS+TGTOPT_HELPFUL);
        if (!cast_on) // If no cast_on then get cast_on from parms[4]. Used mostly for NPC casting.
            cast_on := parms[4];
        endif
	endif

	if( !fromhit )
		//cast_on := Reflected( caster, cast_on, circle );
		//cast_on := Reflected( cast_on );
        if(Reflected(cast_on, caster, struct{}))
            cast_on := caster;
        endif
	else
		PlayObjectCenteredEffect(cast_on, SPELL_EFFECT_ID, SPELL_EFFECT_SPEED, SPELL_EFFECT_LOOP);
	endif

	PlaySoundEffect( cast_on, SFX_SPELL_KILL);


	var protected := IsProtected( caster, cast_on, circle );
	if( protected == IMMUNED )
		EraseObjProperty( caster, "#Casting" );
		return;
	endif


	var multiplier;
	if (!cast_on.isA(POLCLASS_NPC))
		multiplier := 1;
	else
		multiplier := 2;
	endif

	multiplier := ModifyWithMagicEfficiency( caster, multiplier );

	if( protected == CURSED )
		circle := circle * 2;
		multiplier := multiplier * 2;
	endif


	var alternative := CalcSpellDamage( caster, cast_on, circle );
	var protection  := 10; //GetResultingPlaneProtection( cast_on, plane );
	var casterskill := GetEffectiveSkill( caster, SKILLID_EVALUATING_INTELLIGENCE );
	var magery	  := GetEffectiveSkill( caster, SKILLID_MAGERY );
	var victimlevel := GetHp(cast_on);
	var instantkill := CInt( magery * multiplier / 3 );

	if( protection )
		instantkill := instantkill - CInt( instantkill * protection * 0.25 );
		if( instantkill < 1 )
			instantkill := 1;
		endif
	endif

	if( victimlevel <= instantkill )
		//ApplyTheDamage( cast_on, caster, GetHp(cast_on) + 3, DMGID_MAGIC + plane );
        ApplySpellDamageEX(cast_on, GetHp(cast_on) + 3, DMG_PHYSICAL, caster, circle, "Kill");
        //ApplyDamageEX(cast_on, GetHp(cast_on) + 3, DMG_PHYSICAL, caster);

	elseif( victimlevel <= CInt( instantkill * 1.5 ) )
		var victimskill  := GetEffectiveSkill( cast_on, SKILLID_RESISTING_SPELLS );
		var resistchance := CInt( (victimskill / multiplier) -  (casterskill / 3) );;
		if( RandomDiceRoll("1d100") <= resistchance )
			//ApplyPlanarDamage( caster, cast_on, circle, alternative, plane );
			ApplySpellDamageEX(cast_on, alternative, DMG_PHYSICAL, caster, circle, "Kill");
		else
			//ApplyTheDamage( cast_on, caster, GetHp(cast_on) + 3, DMGID_MAGIC + plane );
			ApplySpellDamageEX(cast_on, GetHp(cast_on) + 3, DMG_PHYSICAL, caster, circle, "Kill");
		endif

	else
		//ApplyPlanarDamage( caster, cast_on, circle, alternative, plane );
        ApplySpellDamageEX(cast_on, alternative, DMG_PHYSICAL, caster, circle, "Kill");
	endif

	EraseObjProperty( caster, "#Casting" );
    return 1;
endprogram
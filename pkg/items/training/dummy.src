use uo;
use os;

include "include/client";
include ":attributes:attributes";
include "include/objtype";
include "include/dist";

program training_dummy(who, dummy)
  EraseObjProperty(who, "IsMeditating");
  EraseObjProperty(who, "HealTimer");
  if(Distance(who, dummy) > 1)
    SendSysMessage(who, "You must be standing next to that to use it.");
    return;
  endif
  var cfg := ReadConfigFile(":combat:itemdesc");
  var attribid := cfg[who.weapon.objtype]."Attribute";
  var anim := cfg[who.weapon.objtype]."Anim";
  if(GetObjProperty(dummy, "#swinging"))
    SendSysMessage(who, "That dummy is already in use");
    return;
  endif
  var chk := 0;
  case(attribid)
    "Wrestling": CheckSwing(who, WRESTLING, anim, dummy);
    "Swords":    CheckSwing(who, SWORDSMANSHIP, anim, dummy);
    "Mace":      CheckSwing(who, MACEFIGHTING, anim, dummy);
    "Fencing":   CheckSwing(who, FENCING, anim, dummy);
    "Macefighting":   CheckSwing(who, MACEFIGHTING, anim, dummy);
    "Archery":   SendSysMessage(who, "You must use an archery butte to train archery");
    default:     chk := 1;
  endcase
  if(chk == 1)
    SendSysMessage(who, "You cannot learn to wield that item with a training dummy");
  endif
endprogram

function CheckSwing(who, attribid, action, dummy)
  PerformAction(who, action);
  sleepms(500);
  Detach();
  if(GetAttribute(who, attribid) >= 25.0)
    SendSysMessage(who, "You cannot learn any more from simply hitting a dummy.");
  else
    SkillCheck(who, attribid, 10, 40);
    if(GetAttribute(who, TACTICS) < 25)
      SkillCheck(who, TACTICS, 10, 20);
    endif
  endif
  PlaySoundEffect(who, SFX_13C);
  SetObjProperty(dummy, "#swinging", 1);
  if(dummy.objtype == UOBJ_DUMMYFREEZE_NS)
    dummy.graphic := UOBJ_DUMMYSWING_NS;
    sleepms(3600);
    dummy.graphic := UOBJ_DUMMYFREEZE_NS;
  elseif(dummy.objtype == UOBJ_DUMMYFREEZE_EW)
    dummy.graphic := UOBJ_DUMMYSWING_EW;
    sleepms(3600);
    dummy.graphic := UOBJ_DUMMYFREEZE_EW;
  endif
  EraseObjProperty(dummy, "#swinging");
endfunction

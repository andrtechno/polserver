use vitals;
use uo;
use os;
use util;
use cfgfile;
use unicode;

include "include/client";
include ":attributes:attributes";
include ":npcs:NPCBackpacks";
include ":damage:damage";
include ":virtue:noto";
//include "systems:spawnregion:spawnRegion";
//include ":spawnregion:spawnRegion";
include ":mounts:mounts";
var npcdesc_cfg := ReadConfigFile( "npcdesc" );

include "include/startEqp";

program npcdeath(corpse)
    var i;
    //if(GetObjProperty(corpse, "restockserial"))
    //var stocklist := SystemFindObjectBySerial(CInt(GetObjProperty(corpse, "restockserial")));
    //    DestroyItem(stocklist);
    //endif
    var elem := GetObjProperty(corpse, "npctemplate");

    //New loot system
    var lewtgroup := npcdesc_cfg[elem].lootgroup;
    if(lewtgroup)
        MakeLoot(corpse, CInt(lewtgroup));
    endif

    var master := SystemFindObjectBySerial(CInt(GetObjProperty(corpse, "master")), SYSFIND_SEARCH_OFFLINE_MOBILES);
    if(master)
        master.followers -= 1;
    endif
    var last_damage := GetObjProperty(corpse, "LastDamage");
    var killer := last_damage.serial;
    var killerMobile := SystemFindObjectBySerial(killer);


    //QUEST LINE

    if(CInt(GetObjProperty(killerMobile, "QuestLinePID")) == CInt(GetGlobalProperty("#QuestLinePID")) && CInt(GetGlobalProperty("questline_start")))

        var data_file := DFOpenDataFile(":questline:members");

        var config := GetGlobalProperty("QuestLineConfig");

        if(killerMobile.isa(POLCLASS_NPC))
            killerMobile := SystemFindObjectBySerial(CInt(GetObjProperty(killerMobile, "master")), SYSFIND_SEARCH_OFFLINE_MOBILES);
        endif
        var mem := DFFindElement(data_file, killerMobile.serial);
        var getTotal := CInt(mem.GetProp("total"));

        var quests := GetObjProperty(killerMobile, "questline_npcs");
        var cost_total := CInt(GetObjProperty(killerMobile, "questline_costs"));

        if(config.npcs && quests)
            foreach questLineElem in (config.npcs)
                if(questLineElem.npc == elem)
                    var value := quests[_questLineElem_iter] + 1;
                    if(value <= CInt(config.npcs[_questLineElem_iter].amount))
                        quests[_questLineElem_iter] := value;
                        mem.SetProp("total", getTotal + CInt(config.npcs[_questLineElem_iter].cost));
                        SetObjProperty(killerMobile, "questline_npcs", quests);
                        SendSysMessageUC(killerMobile, "вы убили "+elem+"  "+value+"/"+config.npcs[_questLineElem_iter].amount, "RUS",3, 37);
                    else
                        SendSysMessageUC(killerMobile, "вы уже достигли лимита "+elem+"  ", "RUS",3, 37);
                    endif
                    break;
                endif
            endforeach
        endif
    endif

    //tracking props
    EraseObjProperty(killerMobile, "LastMyAttackOpponent");

    /*if (killer != error)
        i := SystemFindObjectBySerial(killer);

        AdjustNoto(i, corpse);

        if (GetObjProperty(i, "CursedLoot") )
            SetObjProperty(corpse, "guardkill", 1);
        elseif (GetObjProperty(i, "BlessedLoot") )
            SetObjProperty(corpse, "BlessedLoot", 1);
        endif
    endif*/
    if((killer != error) && (!GetObjProperty(corpse, "guardkill")))
        AdjustNoto((SystemFindObjectBySerial(killer)), corpse);
    endif



    /*var char;
    var mounted_char;
    var onchars := EnumerateOnlineCharacters();
    if(GetObjProperty(corpse,"mounted"))
        char := GetObjProperty(corpse,"mounted_on");
        foreach person in onchars
            if(person.serial == CInt(char))
                mounted_char := person;
                break;
            endif
        endforeach

        dismountme(mounted_char, corpse);
    endif*/

    var deathsound := 0;
    var grphic := npcdesc_cfg[elem]."ObjType";
    SetObjProperty(corpse, "Graphic", grphic);
    if((grphic != 0x190) && (grphic != 0x191))
        deathsound := npcdesc_cfg[elem]."deathsound";
        if (deathsound)
            PlaySoundEffect(corpse, deathsound);
        endif
    endif
    set_critical(1);

    var pvePointChance := CInt(npcdesc_cfg[elem]."PvEPointChance");
    if(pvePointChance)
        if(pvePointChance >= RandomInt(99)+1)
            var pvePoint := CInt(npcdesc_cfg[elem].PvEPoint);
            if(pvePoint)
                killerMobile.AddPvEPoint(pvePoint);
                var globalPvePoint := CInt(GetGlobalProperty("PvEPoints"));
                SetGlobalProperty("PvEPoints",globalPvePoint + 1);
            else
                killerMobile.AddPvEPoint(1);
            endif
        endif
    endif

    //Exp
    var exp := npcdesc_cfg[elem]."Exp";
    if(exp)
        var experience := RandomDiceRoll(exp);
        var expProperty := CInt(GetObjProperty(corpse, "exp"));
        experience += expProperty;
        killerMobile.addExp(experience);
    endif

    	//MP_DeathUnmount(corpse);
    dismount(corpse);
    //MP_Unmount( corpse );

    var luckChance := CDbl(npcdesc_cfg[elem]."luckChance");
    var luckAmount := CInt(npcdesc_cfg[elem]."luckAmount");
    var rfloat := CDbl(RandomFloat(99)+1);
    if(luckChance >= rfloat)
        SendSysMessage(killer, "You got lucky", 3, MESSAGE_COLOR_GOOD);

        killerMobile.luck_mod += (luckAmount ? luckAmount : 1);
    endif


    // The following piece of code reports to new regional spawner the death of any NPCs spawned by it.
    Set_Critical(1);
    if ( GetObjProperty(corpse, "regspawn") )
        var SpawnName := GetObjProperty(corpse, "regspawn");
        var numspawns := CInt(GetGlobalProperty(SpawnName));
        if ( numspawns and numspawns > 1 )
            numspawns := numspawns - 1;
            SetGlobalProperty(SpawnName, numspawns);
        else
            EraseGlobalProperty(SpawnName);
        endif
    elseif ( !GetObjProperty(corpse, "guardkill") )
        //AddToSpawner(corpse, npctemplate);
    endif
    Set_Critical(0);
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    if (GetObjProperty(corpse, "totem"))
	    RemakeTotem(corpse, elem);
	    return;
    endif

    if(GetObjProperty(corpse, "guardkill"))
        DestroyItem(corpse);
        return;
    endif
    if(GetObjProperty(corpse,"npctemplate") == "employee")
        foreach thing in EnumerateItemsInContainer(corpse)
            if((thing.layer) && (thing.isa(POLCLASS_WEAPON) || thing.isa(POLCLASS_ARMOR)))
                DestroyItem(thing);
            endif
        endforeach
    endif
    MoveBackpackToCorpse(corpse);
    if(GetObjProperty(corpse, "npctemplate") == "playervendor")
        var itemdesc := ReadConfigFile(":*:itemdesc");
        var elm, dsc;
        foreach thing in EnumerateItemsInContainer(corpse)
            EraseObjProperty(thing, "Vendored");
            if(GetObjProperty(thing, "Vendor"))
                DestroyItem(thing);
            else
                var oldname := GetObjProperty(thing, "OldName");
                if(oldname)
                    SetName(thing, oldname);
                else
                    elm := FindConfigElem(itemdesc, thing.objtype);
                    dsc := itemdesc[thing.objtype].desc;
                    SetName(thing, dsc);
                endif
                EraseObjProperty(thing, "Master");
                EraseObjProperty(thing, "OldName");
                EraseObjProperty(thing, "price");
            endif
        endforeach
    endif
    if(GetObjProperty(corpse, "summoned"))
        DestroyItem(corpse);
    elseif(GetObjProperty(corpse, "nocorpse"))
        foreach item in EnumerateItemsInContainer(corpse)
            MoveObjectToLocation(item, corpse.x, corpse.y, corpse.z, corpse.realm, MOVEOBJECT_FORCELOCATION);
        endforeach
        DestroyItem(corpse);
    else
        var corpseof := GetObjProperty(corpse,"npctemplate");
        corpseof := corpseof; // Added to stop the STUPID 'not used' warning from eCompile.
    endif
endprogram

function dismount(corpse)
	var mount := GetEquipmentByLayer( corpse, 25 );
	foreach item in EnumerateItemsInContainer(corpse)
		if (item.objtype == 0x1F021)
			mount := item;
			break;
		endif
	endforeach
	if (!mount)
		return;
	endif
	var critter := "";
	case (mount.graphic)
		0x3ea2: critter := "horse";
		0x3e9f: critter := "horse2";
		0x3ea0: critter := "horse3";
		0x3ea1: critter := "horse4";
		0x3ea6:	critter := "llama";
		0x3ea3:	critter := "desertostard";
		0x3ea4:	critter := "frenziedostard";
		0x3ea5:	critter := "forestostard";
	endcase
	if (mount.color == 1079)
		critter := "nightmare";
	endif
	DestroyItem( mount );
endfunction

function dismountme(who, corpse)
	var mount := GetEquipmentByLayer(who, 25 );
	var clone := GetObjProperty(corpse,"npctemplate");
	var newcorpse := CreateNpcFromTemplate(clone, corpse.x, corpse.y, corpse.z, 0, corpse.realm);
	var serial := newcorpse.serial;
	SetObjProperty(newcorpse,"myserial", serial);
	newcorpse.color := corpse.color;
	newcorpse.facing := who.facing;
	MoveObjectToLocation(newcorpse, who.x, who.y, who.z, who.realm, MOVEOBJECT_FORCELOCATION);
	var x := newcorpse.x;
	var y := newcorpse.y;
	var z := newcorpse.z;
	newcorpse.facing := who.facing;
	KillMobile(newcorpse);
	var contain;
	foreach cpse in ListItemsAtLocation(x, y, z, who.realm );
		if(CInt(GetObjProperty(cpse,"myserial")) == serial)
			contain := cpse;
			break;
		endif
	endforeach
	contain.name := corpse.name;
	foreach item in EnumerateItemsInContainer(corpse, ENUMERATE_ROOT_ONLY)
		MoveItemToContainer(item, contain);
	endforeach
	DestroyItem(corpse);
	DestroyItem(mount);
endfunction

///////////////////
//  if whatever died was a totem, this function (sometimes) makes another totem that can be repaired
///////////////////

function RemakeTotem(corpse, npctemplate)

	PlaySoundEffect(corpse, SFX_SPELL_DISPEL);
	PlayStationaryEffect(corpse.x, corpse.y, corpse.z, FX_SMOKE, 0xa, 0xa );

	if (RandomInt(10) == 1)
		foreach item in EnumerateItemsInContainer(corpse, ENUMERATE_ROOT_ONLY)
			MoveObjectToLocation(item, corpse.x, corpse.y, corpse.z, MOVEOBJECT_FORCELOCATION );
		endforeach
		DestroyItem(corpse);
		return;
	endif

	var totemtype := GetObjProperty(corpse, "totem");
	var totemcolor := GetObjProperty(corpse, "totemcolor");
	var color := GetObjProperty(corpse, "color");

	set_critical(1);
	var totem := CreateItemAtLocation(corpse.x, corpse.y, corpse.z, totemtype, 1);
	if (!totem)
		foreach item in EnumerateItemsInContainer(corpse, ENUMERATE_ROOT_ONLY)
			MoveObjectToLocation(item, corpse.x, corpse.y, corpse.z, corpse.realm, MOVEOBJECT_FORCELOCATION );
		endforeach
		DestroyItem(corpse);
		return;
		set_critical(0);
	endif

	var temp_string := corpse.desc;
	temp_string["A corpse of "] := "";
	totem.name := temp_string;

	totem.decayAt := 0;
	totem.movable := 1;
	totem.usescript := ":magicitems:use_totem";

	if (totemcolor)
		totem.color := totemcolor;
	endif
	if (color)
		SetObjProperty(totem, "critcolor", color);
	endif
	SetObjProperty(totem, "critgraphic", corpse.graphic);

	SetObjProperty(totem, "critter", npctemplate);
	SetObjProperty(totem, "totemhp", 170);
	SetObjProperty(totem, "broken", RandomInt(20) + 20);

	foreach item in EnumerateItemsInContainer(corpse, ENUMERATE_ROOT_ONLY)
		MoveObjectToLocation(item, corpse.x, corpse.y, corpse.z, MOVEOBJECT_FORCELOCATION );
	endforeach
	DestroyItem(corpse);
	set_critical(0);

endfunction

///////////////////
//  We don't use this on Hope but I added it because there was a call to it from
//  the new code snippet added for DldNGrey's Regional Spawner.
//  this function makes merchants and other similar NPCs respawn
///////////////////
/*
function AddToSpawner (corpse, npctemplate)
	var homepoint := GetObjProperty (corpse, "myhome");
	if (!homepoint)
		return;
	endif

	set_critical (1);
	homepoint[4] := npctemplate;
	var merchants_to_respawn := { };
	if (GetGlobalProperty ("respawnmerchants"))
		merchants_to_respawn := GetGlobalProperty ("respawnmerchants");
	endif

	merchants_to_respawn.append (homepoint);
	SetGlobalProperty ("respawnmerchants", merchants_to_respawn);
	set_critical(0);
endfunction
*/


use http;
use os;
use uo;

const MIN_CHARACTERS_FOR_ACCOUNT_NAME := 4;
const MAX_CHARACTERS_FOR_ACCOUNT_NAME := 10;
const MIN_CHARACTERS_FOR_PASSWORD     := 4;

const ERRORTYPE_NO_DOMAIN       := 1;
const ERRORTYPE_FREE_SERVER     := 2;
const ERRORTYPE_EXISTING_ADRESS := 3;
const ERRORTYPE_EXISTING_IP	:= 4;

var data := struct{};

program create_account()

	var account_name := QueryParam("acc_name");
	var password1    := QueryParam("acc_pass");
	var password2    := QueryParam("acc_pass2");
	var email        := QueryParam("email");

    data.+"success" := Boolean(0);


	if( TypeOf(account_name) != "String" || account_name == "" )
		WriteHtml("<html><head><meta http-equiv=refresh content=0;URL=emptyuser.html></head></html>");
	elseif( TypeOf(password1) != "String" || password1 == "" )
		data.+"message" := "Пароль не может быть пустым.";
	elseif( TypeOf(password2) != "String" || password2 == "" )
		data.+"message" := "Пароль2 не может быть пустым.";
	elseif( TypeOf(email) != "String" || email == "" )
	    data.+"message" := "Email не может быть пустым.";
	//elseif( len(account_name) < MIN_CHARACTERS_FOR_ACCOUNT_NAME )
	//	WriteHtml("<html><head><meta http-equiv=refresh content=0;URL=shortuser.html></head></html>");
	//elseif( len(account_name) > MAX_CHARACTERS_FOR_ACCOUNT_NAME )
	//	WriteHtml("<html><head><meta http-equiv=refresh content=0;URL=longyuser.html></head></html>");
	//elseif( len(password1) < MIN_CHARACTERS_FOR_PASSWORD )
	//	WriteHtml("<html><head><meta http-equiv=refresh content=0;URL=shortpass.html></head></html>");
	elseif( password1 != password2 )
		data.+"message" := "Пароли не совпадают.";
	elseif( password1 == account_name )
        data.+"message" := "Пароль совпадает с аккаунтом.";
	else
		
			var account := CreateAccount(account_name, password1, 1 );

			if( !account )
				case( account.errortext )
					"Account already exists":
                        data.+"message" := "Такой аккаунт уже сущетвует.";
					default:
                        data.+"message" := "Такой аккаунт уже сущетвует.";
				endcase
			else
				account.setProp("email", email);
                data.+"success" := Boolean(1);
                data.+"message" := "Аккаунт успешно создан.";
			endif
	endif

    WriteHtml( PackJSON(data) );
endprogram


function IsValidEmail( byref adress )

	var ret;
	var arobas := Find(adress, "@", 0);
	if( arobas == 0 )
		ret := error;
		ret.+errortype := ERRORTYPE_NO_DOMAIN;
	else
		var domain := adress[arobas+1, len(adress)-arobas];
		if( !domain )
			ret := error;
			ret.+errortype := ERRORTYPE_NO_DOMAIN;
		else
			case( domain )
				"lycos.it":
					ret := error;
					ret.+errortype := ERRORTYPE_FREE_SERVER;
				default:
					ret := RegisterEmail(adress);
			endcase
		endif
	endif
	
	return ret;
	
endfunction


function RegisterEmail( byref adress )

	var ret;
	var registered := GetGlobalProperty("RegisteredEmailAdresses");
	if( !registered )
		registered := dictionary;
		SetGlobalProperty("RegisteredEmailAdresses", registered);
	endif
	
	if( registered.exists(adress) )
		ret := error;
		ret.+errortype := ERRORTYPE_FREE_SERVER;
else
		registered[adress] := 1;
		SetGlobalProperty("RegisteredEmailAdresses", registered);
		ret := 1;
	endif
	
	return ret;

endfunction

function RegisterIP( byref adress )

	var ret;
	var registered := GetGlobalProperty("RegIP");
	if( !registered )
		registered := dictionary;
		SetGlobalProperty("RegIP", registered);
	endif
	
	if( registered.exists(adress) )
		ret := error;
		ret.+errortype := ERRORTYPE_EXISTING_IP;
	else
		registered[adress] := 1;
		SetGlobalProperty("RegIP", registered);
		ret := 1;
	endif
	
	return ret;

endfunction
